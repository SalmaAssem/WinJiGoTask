// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for QuestionBankApi.
    /// </summary>
    public static partial class QuestionBankApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankData'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelQuestionBankBankBankViewModel AddBank(this IQuestionBankApi operations, LMSApplicationCoreCommandsQuestionBankBankAddUpdateBankCommand bankData, string lang)
            {
                return operations.AddBankAsync(bankData, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankData'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelQuestionBankBankBankViewModel> AddBankAsync(this IQuestionBankApi operations, LMSApplicationCoreCommandsQuestionBankBankAddUpdateBankCommand bankData, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddBankWithHttpMessagesAsync(bankData, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankData'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelQuestionBankBankBankViewModel UpdateBank(this IQuestionBankApi operations, LMSApplicationCoreCommandsQuestionBankBankAddUpdateBankCommand bankData, string lang)
            {
                return operations.UpdateBankAsync(bankData, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankData'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelQuestionBankBankBankViewModel> UpdateBankAsync(this IQuestionBankApi operations, LMSApplicationCoreCommandsQuestionBankBankAddUpdateBankCommand bankData, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBankWithHttpMessagesAsync(bankData, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='isPublicList'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelQuestionBankBankBankViewModel> GetUserBanksList(this IQuestionBankApi operations, string lang, bool? isPublicList = default(bool?), int? pageIndex = default(int?), int? pageSize = default(int?))
            {
                return operations.GetUserBanksListAsync(lang, isPublicList, pageIndex, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='isPublicList'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelQuestionBankBankBankViewModel>> GetUserBanksListAsync(this IQuestionBankApi operations, string lang, bool? isPublicList = default(bool?), int? pageIndex = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserBanksListWithHttpMessagesAsync(lang, isPublicList, pageIndex, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelQuestionBankBankGradesSubjectsViewModel GetGradesSubjects(this IQuestionBankApi operations, string lang)
            {
                return operations.GetGradesSubjectsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelQuestionBankBankGradesSubjectsViewModel> GetGradesSubjectsAsync(this IQuestionBankApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGradesSubjectsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteBank(this IQuestionBankApi operations, string bankId, string lang)
            {
                return operations.DeleteBankAsync(bankId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteBankAsync(this IQuestionBankApi operations, string bankId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBankWithHttpMessagesAsync(bankId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionAddUpdateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelQuestionBankQuestionQuestionViewModel AddQuestion(this IQuestionBankApi operations, LMSApplicationCoreCommandsQuestionBankQuestionAddUpdateQuestionCommand questionAddUpdateCommand, string lang)
            {
                return operations.AddQuestionAsync(questionAddUpdateCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionAddUpdateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelQuestionBankQuestionQuestionViewModel> AddQuestionAsync(this IQuestionBankApi operations, LMSApplicationCoreCommandsQuestionBankQuestionAddUpdateQuestionCommand questionAddUpdateCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddQuestionWithHttpMessagesAsync(questionAddUpdateCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionAddUpdateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelQuestionBankQuestionQuestionViewModel UpdateQuestion(this IQuestionBankApi operations, LMSApplicationCoreCommandsQuestionBankQuestionAddUpdateQuestionCommand questionAddUpdateCommand, string lang)
            {
                return operations.UpdateQuestionAsync(questionAddUpdateCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionAddUpdateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelQuestionBankQuestionQuestionViewModel> UpdateQuestionAsync(this IQuestionBankApi operations, LMSApplicationCoreCommandsQuestionBankQuestionAddUpdateQuestionCommand questionAddUpdateCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateQuestionWithHttpMessagesAsync(questionAddUpdateCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelQuestionBankQuestionQuestionViewModel> GetBankQuestions(this IQuestionBankApi operations, string bankId, string lang)
            {
                return operations.GetBankQuestionsAsync(bankId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelQuestionBankQuestionQuestionViewModel>> GetBankQuestionsAsync(this IQuestionBankApi operations, string bankId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBankQuestionsWithHttpMessagesAsync(bankId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelQuestionBankBankBankDetailsViewModel GetBankDetails(this IQuestionBankApi operations, string bankId, string lang)
            {
                return operations.GetBankDetailsAsync(bankId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelQuestionBankBankBankDetailsViewModel> GetBankDetailsAsync(this IQuestionBankApi operations, string bankId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBankDetailsWithHttpMessagesAsync(bankId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteQuestion(this IQuestionBankApi operations, string questionId, string lang)
            {
                return operations.DeleteQuestionAsync(questionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteQuestionAsync(this IQuestionBankApi operations, string questionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteQuestionWithHttpMessagesAsync(questionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchIn'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='difficultyLevel'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='questionType'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelQuestionBankQuestionImportQuestionViewModel> SearchQuestions(this IQuestionBankApi operations, int searchIn, int subjectId, int gradeId, int difficultyLevel, string lang, string keyword = default(string), int? questionType = default(int?))
            {
                return operations.SearchQuestionsAsync(searchIn, subjectId, gradeId, difficultyLevel, lang, keyword, questionType).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchIn'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='difficultyLevel'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='questionType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelQuestionBankQuestionImportQuestionViewModel>> SearchQuestionsAsync(this IQuestionBankApi operations, int searchIn, int subjectId, int gradeId, int difficultyLevel, string lang, string keyword = default(string), int? questionType = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchQuestionsWithHttpMessagesAsync(searchIn, subjectId, gradeId, difficultyLevel, lang, keyword, questionType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankId'>
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelQuestionBankQuestionQuestionViewModel> SearchQuestionsInBank(this IQuestionBankApi operations, string bankId, string keyword, int type, string lang)
            {
                return operations.SearchQuestionsInBankAsync(bankId, keyword, type, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankId'>
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelQuestionBankQuestionQuestionViewModel>> SearchQuestionsInBankAsync(this IQuestionBankApi operations, string bankId, string keyword, int type, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchQuestionsInBankWithHttpMessagesAsync(bankId, keyword, type, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? CanEditQuestion(this IQuestionBankApi operations, string questionId, string lang)
            {
                return operations.CanEditQuestionAsync(questionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CanEditQuestionAsync(this IQuestionBankApi operations, string questionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CanEditQuestionWithHttpMessagesAsync(questionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object UnPinQuestion(this IQuestionBankApi operations, string questionId, string lang)
            {
                return operations.UnPinQuestionAsync(questionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UnPinQuestionAsync(this IQuestionBankApi operations, string questionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnPinQuestionWithHttpMessagesAsync(questionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object PinQuestion(this IQuestionBankApi operations, string questionId, string lang)
            {
                return operations.PinQuestionAsync(questionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PinQuestionAsync(this IQuestionBankApi operations, string questionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PinQuestionWithHttpMessagesAsync(questionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object GetPinnedQuestions(this IQuestionBankApi operations, string lang, int? pageIndex = default(int?), int? pageSize = default(int?))
            {
                return operations.GetPinnedQuestionsAsync(lang, pageIndex, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPinnedQuestionsAsync(this IQuestionBankApi operations, string lang, int? pageIndex = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPinnedQuestionsWithHttpMessagesAsync(lang, pageIndex, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? IsAnyUserPinnedQuestion(this IQuestionBankApi operations, string questionId, string lang)
            {
                return operations.IsAnyUserPinnedQuestionAsync(questionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='questionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsAnyUserPinnedQuestionAsync(this IQuestionBankApi operations, string questionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAnyUserPinnedQuestionWithHttpMessagesAsync(questionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static object SearchUserPinnedQuestions(this IQuestionBankApi operations, string lang, int? pageIndex = default(int?), int? pageSize = default(int?))
            {
                return operations.SearchUserPinnedQuestionsAsync(lang, pageIndex, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SearchUserPinnedQuestionsAsync(this IQuestionBankApi operations, string lang, int? pageIndex = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchUserPinnedQuestionsWithHttpMessagesAsync(lang, pageIndex, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
