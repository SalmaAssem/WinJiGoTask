// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AssessmentsMessages.
    /// </summary>
    public static partial class AssessmentsMessagesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessmentMessage'>
            /// </param>
            public static object HandleMessage(this IAssessmentsMessages operations, LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentIncomingMessage assessmentMessage)
            {
                return operations.HandleMessageAsync(assessmentMessage).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessmentMessage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> HandleMessageAsync(this IAssessmentsMessages operations, LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentIncomingMessage assessmentMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HandleMessageWithHttpMessagesAsync(assessmentMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUserLearningObjectives(this IAssessmentsMessages operations)
            {
                return operations.GetUserLearningObjectivesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserLearningObjectivesAsync(this IAssessmentsMessages operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserLearningObjectivesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object Get(this IAssessmentsMessages operations, string lang)
            {
                return operations.GetAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IAssessmentsMessages operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
