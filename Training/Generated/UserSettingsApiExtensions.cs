// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UserSettingsApi.
    /// </summary>
    public static partial class UserSettingsApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='selectedLanguage'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object ChangeLanguage(this IUserSettingsApi operations, string selectedLanguage, string lang)
            {
                return operations.ChangeLanguageAsync(selectedLanguage, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='selectedLanguage'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangeLanguageAsync(this IUserSettingsApi operations, string selectedLanguage, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeLanguageWithHttpMessagesAsync(selectedLanguage, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='selectedCalendar'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object ChangeCalendar(this IUserSettingsApi operations, int selectedCalendar, string lang)
            {
                return operations.ChangeCalendarAsync(selectedCalendar, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='selectedCalendar'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangeCalendarAsync(this IUserSettingsApi operations, int selectedCalendar, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeCalendarWithHttpMessagesAsync(selectedCalendar, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='selectedActiveUserId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object ChangePreferredRole(this IUserSettingsApi operations, int selectedActiveUserId, string lang)
            {
                return operations.ChangePreferredRoleAsync(selectedActiveUserId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='selectedActiveUserId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangePreferredRoleAsync(this IUserSettingsApi operations, int selectedActiveUserId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangePreferredRoleWithHttpMessagesAsync(selectedActiveUserId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
