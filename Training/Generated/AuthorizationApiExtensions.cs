// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AuthorizationApi.
    /// </summary>
    public static partial class AuthorizationApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextType'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='childCode'>
            /// </param>
            public static IList<string> GetUserPermissionsByCourseId(this IAuthorizationApi operations, string contextType, string courseId, string lang, string childCode = default(string))
            {
                return operations.GetUserPermissionsByCourseIdAsync(contextType, courseId, lang, childCode).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextType'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='childCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetUserPermissionsByCourseIdAsync(this IAuthorizationApi operations, string contextType, string courseId, string lang, string childCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPermissionsByCourseIdWithHttpMessagesAsync(contextType, courseId, lang, childCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextType'>
            /// </param>
            /// <param name='spaceId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<string> GetUserPermissionsBySpaceId(this IAuthorizationApi operations, string contextType, string spaceId, string lang)
            {
                return operations.GetUserPermissionsBySpaceIdAsync(contextType, spaceId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextType'>
            /// </param>
            /// <param name='spaceId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetUserPermissionsBySpaceIdAsync(this IAuthorizationApi operations, string contextType, string spaceId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPermissionsBySpaceIdWithHttpMessagesAsync(contextType, spaceId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextType'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<string> GetUserPermissions(this IAuthorizationApi operations, string contextType, string lang)
            {
                return operations.GetUserPermissionsAsync(contextType, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextType'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetUserPermissionsAsync(this IAuthorizationApi operations, string contextType, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPermissionsWithHttpMessagesAsync(contextType, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object IsUserCanViewOrganizationReports(this IAuthorizationApi operations, string lang)
            {
                return operations.IsUserCanViewOrganizationReportsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsUserCanViewOrganizationReportsAsync(this IAuthorizationApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsUserCanViewOrganizationReportsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<string> GetSystemPermissions(this IAuthorizationApi operations, string lang)
            {
                return operations.GetSystemPermissionsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetSystemPermissionsAsync(this IAuthorizationApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemPermissionsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextType'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='contextId'>
            /// </param>
            public static IList<string> GetUserPermissionsOnContext(this IAuthorizationApi operations, string contextType, string lang, string contextId = default(string))
            {
                return operations.GetUserPermissionsOnContextAsync(contextType, lang, contextId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextType'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetUserPermissionsOnContextAsync(this IAuthorizationApi operations, string contextType, string lang, string contextId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPermissionsOnContextWithHttpMessagesAsync(contextType, lang, contextId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
