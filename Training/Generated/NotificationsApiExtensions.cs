// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NotificationsApi.
    /// </summary>
    public static partial class NotificationsApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lastLoadedNotificationId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelNotificationViewModel> GetNotifications(this INotificationsApi operations, string lastLoadedNotificationId)
            {
                return operations.GetNotificationsAsync(lastLoadedNotificationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lastLoadedNotificationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelNotificationViewModel>> GetNotificationsAsync(this INotificationsApi operations, string lastLoadedNotificationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotificationsWithHttpMessagesAsync(lastLoadedNotificationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lastLoadedNotificationId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelNotificationViewModel> SetSeenNotifications(this INotificationsApi operations, string lastLoadedNotificationId)
            {
                return operations.SetSeenNotificationsAsync(lastLoadedNotificationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lastLoadedNotificationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelNotificationViewModel>> SetSeenNotificationsAsync(this INotificationsApi operations, string lastLoadedNotificationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSeenNotificationsWithHttpMessagesAsync(lastLoadedNotificationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationTypeId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelNotificationViewModel> SubscribeToNotificationType(this INotificationsApi operations, string notificationTypeId)
            {
                return operations.SubscribeToNotificationTypeAsync(notificationTypeId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationTypeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelNotificationViewModel>> SubscribeToNotificationTypeAsync(this INotificationsApi operations, string notificationTypeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscribeToNotificationTypeWithHttpMessagesAsync(notificationTypeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationTypeId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelNotificationViewModel> UnSubscribeFromNotificationType(this INotificationsApi operations, string notificationTypeId)
            {
                return operations.UnSubscribeFromNotificationTypeAsync(notificationTypeId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationTypeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelNotificationViewModel>> UnSubscribeFromNotificationTypeAsync(this INotificationsApi operations, string notificationTypeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnSubscribeFromNotificationTypeWithHttpMessagesAsync(notificationTypeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='quizId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void QuizPublished(this INotificationsApi operations, int courseId, string quizId, string lang)
            {
                operations.QuizPublishedAsync(courseId, quizId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='quizId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task QuizPublishedAsync(this INotificationsApi operations, int courseId, string quizId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.QuizPublishedWithHttpMessagesAsync(courseId, quizId, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='isSpecificAssignees'>
            /// </param>
            /// <param name='assesssmentId'>
            /// </param>
            /// <param name='learnersList'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void AssessmentAssigned(this INotificationsApi operations, int courseId, bool isSpecificAssignees, string assesssmentId, IList<int?> learnersList, string lang)
            {
                operations.AssessmentAssignedAsync(courseId, isSpecificAssignees, assesssmentId, learnersList, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='isSpecificAssignees'>
            /// </param>
            /// <param name='assesssmentId'>
            /// </param>
            /// <param name='learnersList'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssessmentAssignedAsync(this INotificationsApi operations, int courseId, bool isSpecificAssignees, string assesssmentId, IList<int?> learnersList, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssessmentAssignedWithHttpMessagesAsync(courseId, isSpecificAssignees, assesssmentId, learnersList, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='isSpecificAssignees'>
            /// </param>
            /// <param name='assesssmentId'>
            /// </param>
            /// <param name='learnersList'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void InClassActivityAssigned(this INotificationsApi operations, int courseId, bool isSpecificAssignees, string assesssmentId, IList<int?> learnersList, string lang)
            {
                operations.InClassActivityAssignedAsync(courseId, isSpecificAssignees, assesssmentId, learnersList, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='isSpecificAssignees'>
            /// </param>
            /// <param name='assesssmentId'>
            /// </param>
            /// <param name='learnersList'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InClassActivityAssignedAsync(this INotificationsApi operations, int courseId, bool isSpecificAssignees, string assesssmentId, IList<int?> learnersList, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InClassActivityAssignedWithHttpMessagesAsync(courseId, isSpecificAssignees, assesssmentId, learnersList, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gradeChangedCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void GradeChanged(this INotificationsApi operations, LMSApplicationCoreCommandsNotiificationsGradeChangedCommand gradeChangedCommand, string lang)
            {
                operations.GradeChangedAsync(gradeChangedCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gradeChangedCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GradeChangedAsync(this INotificationsApi operations, LMSApplicationCoreCommandsNotiificationsGradeChangedCommand gradeChangedCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GradeChangedWithHttpMessagesAsync(gradeChangedCommand, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activitySubmitCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void ActivitySubmitted(this INotificationsApi operations, LMSApplicationCoreCommandsNotiificationsActivitySubmitCommand activitySubmitCommand, string lang)
            {
                operations.ActivitySubmittedAsync(activitySubmitCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activitySubmitCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivitySubmittedAsync(this INotificationsApi operations, LMSApplicationCoreCommandsNotiificationsActivitySubmitCommand activitySubmitCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivitySubmittedWithHttpMessagesAsync(activitySubmitCommand, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void SendConfirmationMail(this INotificationsApi operations, string lang)
            {
                operations.SendConfirmationMailAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendConfirmationMailAsync(this INotificationsApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendConfirmationMailWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationStatus'>
            /// </param>
            /// <param name='notificationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void SetNotificationSettingStatusGet(this INotificationsApi operations, bool notificationStatus, int notificationId, string lang)
            {
                operations.SetNotificationSettingStatusGetAsync(notificationStatus, notificationId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationStatus'>
            /// </param>
            /// <param name='notificationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetNotificationSettingStatusGetAsync(this INotificationsApi operations, bool notificationStatus, int notificationId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetNotificationSettingStatusGetWithHttpMessagesAsync(notificationStatus, notificationId, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationStatus'>
            /// </param>
            /// <param name='notificationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void SetNotificationSettingStatus(this INotificationsApi operations, bool notificationStatus, int notificationId, string lang)
            {
                operations.SetNotificationSettingStatusAsync(notificationStatus, notificationId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationStatus'>
            /// </param>
            /// <param name='notificationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetNotificationSettingStatusAsync(this INotificationsApi operations, bool notificationStatus, int notificationId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetNotificationSettingStatusWithHttpMessagesAsync(notificationStatus, notificationId, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enableSecondaryMailNotification'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? UpdateSecondaryMailNotification(this INotificationsApi operations, bool enableSecondaryMailNotification, string lang)
            {
                return operations.UpdateSecondaryMailNotificationAsync(enableSecondaryMailNotification, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enableSecondaryMailNotification'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> UpdateSecondaryMailNotificationAsync(this INotificationsApi operations, bool enableSecondaryMailNotification, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSecondaryMailNotificationWithHttpMessagesAsync(enableSecondaryMailNotification, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enableSecondaryMailNotification'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? UpdateSecondaryMailNotificationPost(this INotificationsApi operations, bool enableSecondaryMailNotification, string lang)
            {
                return operations.UpdateSecondaryMailNotificationPostAsync(enableSecondaryMailNotification, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enableSecondaryMailNotification'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> UpdateSecondaryMailNotificationPostAsync(this INotificationsApi operations, bool enableSecondaryMailNotification, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSecondaryMailNotificationPostWithHttpMessagesAsync(enableSecondaryMailNotification, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? SendConfirmationMailToSecondryEmail(this INotificationsApi operations, string lang)
            {
                return operations.SendConfirmationMailToSecondryEmailAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> SendConfirmationMailToSecondryEmailAsync(this INotificationsApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendConfirmationMailToSecondryEmailWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetUserUnSeenNotificationsCount(this INotificationsApi operations, string lang)
            {
                return operations.GetUserUnSeenNotificationsCountAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetUserUnSeenNotificationsCountAsync(this INotificationsApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserUnSeenNotificationsCountWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationSeenCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object SetNotificationSeen(this INotificationsApi operations, LMSApplicationCoreCommandsNotiificationsNotificationSeenCommand notificationSeenCommand, string lang)
            {
                return operations.SetNotificationSeenAsync(notificationSeenCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationSeenCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetNotificationSeenAsync(this INotificationsApi operations, LMSApplicationCoreCommandsNotiificationsNotificationSeenCommand notificationSeenCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetNotificationSeenWithHttpMessagesAsync(notificationSeenCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
