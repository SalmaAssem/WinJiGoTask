// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EvaluationApi.
    /// </summary>
    public static partial class EvaluationApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel> GetUserEvaluations(this IEvaluationApi operations, int userId, string lang)
            {
                return operations.GetUserEvaluationsAsync(userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel>> GetUserEvaluationsAsync(this IEvaluationApi operations, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserEvaluationsWithHttpMessagesAsync(userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetUserEvaluationsCount(this IEvaluationApi operations, int userId, string lang)
            {
                return operations.GetUserEvaluationsCountAsync(userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetUserEvaluationsCountAsync(this IEvaluationApi operations, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserEvaluationsCountWithHttpMessagesAsync(userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object CheckIsUserBelongsToMyMentees(this IEvaluationApi operations, int userId, string lang)
            {
                return operations.CheckIsUserBelongsToMyMenteesAsync(userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CheckIsUserBelongsToMyMenteesAsync(this IEvaluationApi operations, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckIsUserBelongsToMyMenteesWithHttpMessagesAsync(userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEvaluatoinCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel> AddUserEvaluation(this IEvaluationApi operations, LMSApplicationCoreCommandsUserEvaluationCommad userEvaluatoinCommand, string lang)
            {
                return operations.AddUserEvaluationAsync(userEvaluatoinCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEvaluatoinCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel>> AddUserEvaluationAsync(this IEvaluationApi operations, LMSApplicationCoreCommandsUserEvaluationCommad userEvaluatoinCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserEvaluationWithHttpMessagesAsync(userEvaluatoinCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEvaluatoinCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel> EditUserEvaluation(this IEvaluationApi operations, LMSApplicationCoreCommandsUserEvaluationCommad userEvaluatoinCommand, string lang)
            {
                return operations.EditUserEvaluationAsync(userEvaluatoinCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEvaluatoinCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel>> EditUserEvaluationAsync(this IEvaluationApi operations, LMSApplicationCoreCommandsUserEvaluationCommad userEvaluatoinCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditUserEvaluationWithHttpMessagesAsync(userEvaluatoinCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreViewModelsFormTemplateViewModel> GetUserEvaluationTemplates(this IEvaluationApi operations, string lang)
            {
                return operations.GetUserEvaluationTemplatesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreViewModelsFormTemplateViewModel>> GetUserEvaluationTemplatesAsync(this IEvaluationApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserEvaluationTemplatesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEvaluationTemplateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel AddUserEvaluationTemplate(this IEvaluationApi operations, LMSApplicationCoreCommandsUserEvaluationTemplateCommand userEvaluationTemplateCommand, string lang)
            {
                return operations.AddUserEvaluationTemplateAsync(userEvaluationTemplateCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEvaluationTemplateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel> AddUserEvaluationTemplateAsync(this IEvaluationApi operations, LMSApplicationCoreCommandsUserEvaluationTemplateCommand userEvaluationTemplateCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserEvaluationTemplateWithHttpMessagesAsync(userEvaluationTemplateCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEvaluationTemplateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel EditUserEvaluationTemplate(this IEvaluationApi operations, LMSApplicationCoreCommandsUserEvaluationTemplateCommand userEvaluationTemplateCommand, string lang)
            {
                return operations.EditUserEvaluationTemplateAsync(userEvaluationTemplateCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userEvaluationTemplateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel> EditUserEvaluationTemplateAsync(this IEvaluationApi operations, LMSApplicationCoreCommandsUserEvaluationTemplateCommand userEvaluationTemplateCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditUserEvaluationTemplateWithHttpMessagesAsync(userEvaluationTemplateCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletedTemplateId'>
            /// </param>
            /// <param name='userEvaluationTemplateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel ChangeUserEvaluationTemplate(this IEvaluationApi operations, string deletedTemplateId, LMSApplicationCoreCommandsUserEvaluationTemplateCommand userEvaluationTemplateCommand, string lang)
            {
                return operations.ChangeUserEvaluationTemplateAsync(deletedTemplateId, userEvaluationTemplateCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletedTemplateId'>
            /// </param>
            /// <param name='userEvaluationTemplateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelEvaluationUserEvaluationsViewModel> ChangeUserEvaluationTemplateAsync(this IEvaluationApi operations, string deletedTemplateId, LMSApplicationCoreCommandsUserEvaluationTemplateCommand userEvaluationTemplateCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeUserEvaluationTemplateWithHttpMessagesAsync(deletedTemplateId, userEvaluationTemplateCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
