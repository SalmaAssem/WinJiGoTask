// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CourseApi.
    /// </summary>
    public static partial class CourseApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? IsCourseHasPublishedWithPassingScoreAssessments(this ICourseApi operations, int courseId, string lang)
            {
                return operations.IsCourseHasPublishedWithPassingScoreAssessmentsAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsCourseHasPublishedWithPassingScoreAssessmentsAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCourseHasPublishedWithPassingScoreAssessmentsWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? IsCourseHasPublishedVideo(this ICourseApi operations, int courseId, string lang)
            {
                return operations.IsCourseHasPublishedVideoAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsCourseHasPublishedVideoAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCourseHasPublishedVideoWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? IsCourseHasSessions(this ICourseApi operations, int courseId, string lang)
            {
                return operations.IsCourseHasSessionsAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsCourseHasSessionsAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCourseHasSessionsWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelRoleViewModel> GetCourseAvailableRoles(this ICourseApi operations, string lang)
            {
                return operations.GetCourseAvailableRolesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelRoleViewModel>> GetCourseAvailableRolesAsync(this ICourseApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseAvailableRolesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreViewModelsFormTemplateViewModel> GetCourseLessonPlanTemplates(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseLessonPlanTemplatesAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreViewModelsFormTemplateViewModel>> GetCourseLessonPlanTemplatesAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseLessonPlanTemplatesWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSessionLessonPlanViewModel GetSessionLessonPlanTemplate(this ICourseApi operations, string sessionId, string lang)
            {
                return operations.GetSessionLessonPlanTemplateAsync(sessionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSessionLessonPlanViewModel> GetSessionLessonPlanTemplateAsync(this ICourseApi operations, string sessionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionLessonPlanTemplateWithHttpMessagesAsync(sessionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteLessonPlanTemplate(this ICourseApi operations, int templateId, int courseId, string lang)
            {
                return operations.DeleteLessonPlanTemplateAsync(templateId, courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteLessonPlanTemplateAsync(this ICourseApi operations, int templateId, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteLessonPlanTemplateWithHttpMessagesAsync(templateId, courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionLessonPlanCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object EditLessonPlanTemplate(this ICourseApi operations, LMSApplicationCoreCommandsSessionLessonPlanCommand sessionLessonPlanCommand, string lang)
            {
                return operations.EditLessonPlanTemplateAsync(sessionLessonPlanCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionLessonPlanCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditLessonPlanTemplateAsync(this ICourseApi operations, LMSApplicationCoreCommandsSessionLessonPlanCommand sessionLessonPlanCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditLessonPlanTemplateWithHttpMessagesAsync(sessionLessonPlanCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionLessonPlanCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object ChangeLessonPlanTemplate(this ICourseApi operations, LMSApplicationCoreCommandsSessionLessonPlanCommand sessionLessonPlanCommand, string lang)
            {
                return operations.ChangeLessonPlanTemplateAsync(sessionLessonPlanCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionLessonPlanCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangeLessonPlanTemplateAsync(this ICourseApi operations, LMSApplicationCoreCommandsSessionLessonPlanCommand sessionLessonPlanCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeLessonPlanTemplateWithHttpMessagesAsync(sessionLessonPlanCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copyMaterialCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialDetailsViewModel CopyMaterial(this ICourseApi operations, LMSApplicationCoreCommandsCopyMaterialCommand copyMaterialCommand, string lang)
            {
                return operations.CopyMaterialAsync(copyMaterialCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copyMaterialCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialDetailsViewModel> CopyMaterialAsync(this ICourseApi operations, LMSApplicationCoreCommandsCopyMaterialCommand copyMaterialCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopyMaterialWithHttpMessagesAsync(copyMaterialCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copyActivityCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object CopyActivityMultiSessions(this ICourseApi operations, LMSApplicationCoreCommandsCopyActivityCommand copyActivityCommand, string lang)
            {
                return operations.CopyActivityMultiSessionsAsync(copyActivityCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copyActivityCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CopyActivityMultiSessionsAsync(this ICourseApi operations, LMSApplicationCoreCommandsCopyActivityCommand copyActivityCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopyActivityMultiSessionsWithHttpMessagesAsync(copyActivityCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelTeacherDetails> GetCoursesAdmins(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.GetCoursesAdminsAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelTeacherDetails>> GetCoursesAdminsAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoursesAdminsWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelRoundSessionsDataViewModel> GetCourseGroupRoundsSessionsData(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseGroupRoundsSessionsDataAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelRoundSessionsDataViewModel>> GetCourseGroupRoundsSessionsDataAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupRoundsSessionsDataWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseCatalogueId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object CourseGroupPreview(this ICourseApi operations, int courseCatalogueId, string lang)
            {
                return operations.CourseGroupPreviewAsync(courseCatalogueId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseCatalogueId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CourseGroupPreviewAsync(this ICourseApi operations, int courseCatalogueId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CourseGroupPreviewWithHttpMessagesAsync(courseCatalogueId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object CoursePreview(this ICourseApi operations, int courseId, string lang)
            {
                return operations.CoursePreviewAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CoursePreviewAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CoursePreviewWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='course'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object RequestToJoinCourse(this ICourseApi operations, object course, string lang)
            {
                return operations.RequestToJoinCourseAsync(course, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='course'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RequestToJoinCourseAsync(this ICourseApi operations, object course, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestToJoinCourseWithHttpMessagesAsync(course, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='excludeDraft'>
            /// </param>
            public static object GetCoursesAllowedForTeacher(this ICourseApi operations, string keyword, string lang, bool? excludeDraft = default(bool?))
            {
                return operations.GetCoursesAllowedForTeacherAsync(keyword, lang, excludeDraft).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='excludeDraft'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCoursesAllowedForTeacherAsync(this ICourseApi operations, string keyword, string lang, bool? excludeDraft = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoursesAllowedForTeacherWithHttpMessagesAsync(keyword, lang, excludeDraft, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='excludeDraft'>
            /// </param>
            public static object GetCoursesForPrerequisites(this ICourseApi operations, string keyword, int courseGroupId, string lang, bool? excludeDraft = default(bool?))
            {
                return operations.GetCoursesForPrerequisitesAsync(keyword, courseGroupId, lang, excludeDraft).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='excludeDraft'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCoursesForPrerequisitesAsync(this ICourseApi operations, string keyword, int courseGroupId, string lang, bool? excludeDraft = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoursesForPrerequisitesWithHttpMessagesAsync(keyword, courseGroupId, lang, excludeDraft, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseCoverInfoViewModel GetCourseCoverInfo(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseCoverInfoAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseCoverInfoViewModel> GetCourseCoverInfoAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseCoverInfoWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsCourse> GetCourseGroupCourses(this ICourseApi operations, int id, string lang)
            {
                return operations.GetCourseGroupCoursesAsync(id, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsCourse>> GetCourseGroupCoursesAsync(this ICourseApi operations, int id, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupCoursesWithHttpMessagesAsync(id, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetIsCourseRoundsEnabled(this ICourseApi operations, string lang)
            {
                return operations.GetIsCourseRoundsEnabledAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetIsCourseRoundsEnabledAsync(this ICourseApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIsCourseRoundsEnabledWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='track'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object JoinTrack(this ICourseApi operations, object track, string lang)
            {
                return operations.JoinTrackAsync(track, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='track'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> JoinTrackAsync(this ICourseApi operations, object track, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.JoinTrackWithHttpMessagesAsync(track, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetIsCourseHasRequests(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetIsCourseHasRequestsAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetIsCourseHasRequestsAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIsCourseHasRequestsWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSessionBasicViewModel> GetSessionsBasicByCourseId(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetSessionsBasicByCourseIdAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSessionBasicViewModel>> GetSessionsBasicByCourseIdAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsBasicByCourseIdWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IDictionary<string, bool?> GetSessionsUpdatedStatus(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetSessionsUpdatedStatusAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, bool?>> GetSessionsUpdatedStatusAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsUpdatedStatusWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetCourseGroupTypeById(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseGroupTypeByIdAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetCourseGroupTypeByIdAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupTypeByIdWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetCourseGroupSchoolId(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseGroupSchoolIdAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetCourseGroupSchoolIdAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupSchoolIdWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='keyword'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAttendanceViewModel> GetAllSessionAttendancesBySessionId(this ICourseApi operations, int courseId, string sessionId, int pageIndex, int pageSize, string lang, string keyword = default(string))
            {
                return operations.GetAllSessionAttendancesBySessionIdAsync(courseId, sessionId, pageIndex, pageSize, lang, keyword).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAttendanceViewModel>> GetAllSessionAttendancesBySessionIdAsync(this ICourseApi operations, int courseId, string sessionId, int pageIndex, int pageSize, string lang, string keyword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSessionAttendancesBySessionIdWithHttpMessagesAsync(courseId, sessionId, pageIndex, pageSize, lang, keyword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAttendanceWithStatusViewModel GetAllSessionAttendancesAndStatusBySessionId(this ICourseApi operations, int courseId, string sessionId, string lang)
            {
                return operations.GetAllSessionAttendancesAndStatusBySessionIdAsync(courseId, sessionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAttendanceWithStatusViewModel> GetAllSessionAttendancesAndStatusBySessionIdAsync(this ICourseApi operations, int courseId, string sessionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSessionAttendancesAndStatusBySessionIdWithHttpMessagesAsync(courseId, sessionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAttendanceStatusBasicInfo> GetAllAttendanceStatus(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.GetAllAttendanceStatusAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAttendanceStatusBasicInfo>> GetAllAttendanceStatusAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllAttendanceStatusWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='keyword'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAttendanceViewModel> GetSessionAttendances(this ICourseApi operations, int courseId, string sessionId, int pageIndex, int pageSize, string lang, string keyword = default(string))
            {
                return operations.GetSessionAttendancesAsync(courseId, sessionId, pageIndex, pageSize, lang, keyword).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAttendanceViewModel>> GetSessionAttendancesAsync(this ICourseApi operations, int courseId, string sessionId, int pageIndex, int pageSize, string lang, string keyword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionAttendancesWithHttpMessagesAsync(courseId, sessionId, pageIndex, pageSize, lang, keyword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsCourse AddCourseGroup(this ICourseApi operations, LMSApplicationCoreCommandsAddCourseGroupCommand courseJson, string lang)
            {
                return operations.AddCourseGroupAsync(courseJson, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsCourse> AddCourseGroupAsync(this ICourseApi operations, LMSApplicationCoreCommandsAddCourseGroupCommand courseJson, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCourseGroupWithHttpMessagesAsync(courseJson, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='course'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object AddCourse(this ICourseApi operations, LMSApplicationCoreCommandsAddCourseCommand course, string lang)
            {
                return operations.AddCourseAsync(course, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='course'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddCourseAsync(this ICourseApi operations, LMSApplicationCoreCommandsAddCourseCommand course, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCourseWithHttpMessagesAsync(course, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelUpdateCourseViewModel UpdateCourseGroup(this ICourseApi operations, LMSApplicationCoreCommandsUpdateCourseGroupCommand courseJson, string lang)
            {
                return operations.UpdateCourseGroupAsync(courseJson, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUpdateCourseViewModel> UpdateCourseGroupAsync(this ICourseApi operations, LMSApplicationCoreCommandsUpdateCourseGroupCommand courseJson, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCourseGroupWithHttpMessagesAsync(courseJson, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsCourse UpdateCourse(this ICourseApi operations, LMSApplicationCoreUpdateCourseCommand courseJson, string lang)
            {
                return operations.UpdateCourseAsync(courseJson, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsCourse> UpdateCourseAsync(this ICourseApi operations, LMSApplicationCoreUpdateCourseCommand courseJson, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCourseWithHttpMessagesAsync(courseJson, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string ResetAccessCode(this ICourseApi operations, int courseId, string lang)
            {
                return operations.ResetAccessCodeAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ResetAccessCodeAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResetAccessCodeWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseViewModel GetCourseDetails(this ICourseApi operations, int courseGroupId, string lang, int? courseId = default(int?))
            {
                return operations.GetCourseDetailsAsync(courseGroupId, lang, courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseViewModel> GetCourseDetailsAsync(this ICourseApi operations, int courseGroupId, string lang, int? courseId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseDetailsWithHttpMessagesAsync(courseGroupId, lang, courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='childCode'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseViewModel GetCourseDetailsAndUpdateLastAccess(this ICourseApi operations, int courseGroupId, string lang, int? courseId = default(int?), string childCode = default(string))
            {
                return operations.GetCourseDetailsAndUpdateLastAccessAsync(courseGroupId, lang, courseId, childCode).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='childCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseViewModel> GetCourseDetailsAndUpdateLastAccessAsync(this ICourseApi operations, int courseGroupId, string lang, int? courseId = default(int?), string childCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseDetailsAndUpdateLastAccessWithHttpMessagesAsync(courseGroupId, lang, courseId, childCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCoursePinViewModel PinCourse(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.PinCourseAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCoursePinViewModel> PinCourseAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PinCourseWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCoursePinViewModel UnpinCourse(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.UnpinCourseAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCoursePinViewModel> UnpinCourseAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnpinCourseWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsLearner> GetLearnersByCourseId(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetLearnersByCourseIdAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsLearner>> GetLearnersByCourseIdAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearnersByCourseIdWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsLearner> GetLearnersToScoreByCourseId(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetLearnersToScoreByCourseIdAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsLearner>> GetLearnersToScoreByCourseIdAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearnersToScoreByCourseIdWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelUserProfileBasicInfoViewModel> GetCourseLearnersBasicInfo(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseLearnersBasicInfoAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelUserProfileBasicInfoViewModel>> GetCourseLearnersBasicInfoAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseLearnersBasicInfoWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelUserProfileBasicInfoViewModel> GetSchoolStudentsBasicInfo(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetSchoolStudentsBasicInfoAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelUserProfileBasicInfoViewModel>> GetSchoolStudentsBasicInfoAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolStudentsBasicInfoWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='usersIdsList'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelUserProfileBasicInfoViewModel> LoadLearnersBasicInfo(this ICourseApi operations, IList<int?> usersIdsList, string lang)
            {
                return operations.LoadLearnersBasicInfoAsync(usersIdsList, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='usersIdsList'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelUserProfileBasicInfoViewModel>> LoadLearnersBasicInfoAsync(this ICourseApi operations, IList<int?> usersIdsList, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoadLearnersBasicInfoWithHttpMessagesAsync(usersIdsList, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='memberId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='roleId'>
            /// </param>
            public static int? RemoveMemberFromCourseById(this ICourseApi operations, int memberId, int courseId, string lang, int? roleId = default(int?))
            {
                return operations.RemoveMemberFromCourseByIdAsync(memberId, courseId, lang, roleId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='memberId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> RemoveMemberFromCourseByIdAsync(this ICourseApi operations, int memberId, int courseId, string lang, int? roleId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveMemberFromCourseByIdWithHttpMessagesAsync(memberId, courseId, lang, roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object RemoveUserFromCourse(this ICourseApi operations, int userId, int courseId, string lang)
            {
                return operations.RemoveUserFromCourseAsync(userId, courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveUserFromCourseAsync(this ICourseApi operations, int userId, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveUserFromCourseWithHttpMessagesAsync(userId, courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsInstructor GetCourseInstructor(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseInstructorAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsInstructor> GetCourseInstructorAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseInstructorWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsCourse> GetUserCourses(this ICourseApi operations, string lang)
            {
                return operations.GetUserCoursesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsCourse>> GetUserCoursesAsync(this ICourseApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserCoursesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canManage'>
            /// </param>
            /// <param name='onlyOnlineCollaboration'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseGroupCopyViewModel> GetTargetCoursesForCopy(this ICourseApi operations, string lang, bool? canManage = default(bool?), bool? onlyOnlineCollaboration = default(bool?), int? courseId = default(int?))
            {
                return operations.GetTargetCoursesForCopyAsync(lang, canManage, onlyOnlineCollaboration, courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canManage'>
            /// </param>
            /// <param name='onlyOnlineCollaboration'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseGroupCopyViewModel>> GetTargetCoursesForCopyAsync(this ICourseApi operations, string lang, bool? canManage = default(bool?), bool? onlyOnlineCollaboration = default(bool?), int? courseId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTargetCoursesForCopyWithHttpMessagesAsync(lang, canManage, onlyOnlineCollaboration, courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IDictionary<string, int?> GetNotGradedAssessmentsCountForEachCourse(this ICourseApi operations, string lang, int? pageNumber = default(int?), int? pageSize = default(int?))
            {
                return operations.GetNotGradedAssessmentsCountForEachCourseAsync(lang, pageNumber, pageSize).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, int?>> GetNotGradedAssessmentsCountForEachCourseAsync(this ICourseApi operations, string lang, int? pageNumber = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotGradedAssessmentsCountForEachCourseWithHttpMessagesAsync(lang, pageNumber, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canAddHandOut'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='includeAdmin'>
            /// </param>
            /// <param name='includeSubject'>
            /// </param>
            /// <param name='includeGrade'>
            /// </param>
            /// <param name='includeRounds'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            public static IList<LMSDomainCoreModelsCourseView> GetCourses(this ICourseApi operations, string lang, bool? canAddHandOut = default(bool?), int? pageSize = default(int?), int? pageNumber = default(int?), bool? includeAdmin = default(bool?), bool? includeSubject = default(bool?), bool? includeGrade = default(bool?), bool? includeRounds = default(bool?), IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), int? subjectId = default(int?), int? gradeId = default(int?))
            {
                return operations.GetCoursesAsync(lang, canAddHandOut, pageSize, pageNumber, includeAdmin, includeSubject, includeGrade, includeRounds, schoolIds, includeSchoolChilds, subjectId, gradeId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canAddHandOut'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='includeAdmin'>
            /// </param>
            /// <param name='includeSubject'>
            /// </param>
            /// <param name='includeGrade'>
            /// </param>
            /// <param name='includeRounds'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsCourseView>> GetCoursesAsync(this ICourseApi operations, string lang, bool? canAddHandOut = default(bool?), int? pageSize = default(int?), int? pageNumber = default(int?), bool? includeAdmin = default(bool?), bool? includeSubject = default(bool?), bool? includeGrade = default(bool?), bool? includeRounds = default(bool?), IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), int? subjectId = default(int?), int? gradeId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoursesWithHttpMessagesAsync(lang, canAddHandOut, pageSize, pageNumber, includeAdmin, includeSubject, includeGrade, includeRounds, schoolIds, includeSchoolChilds, subjectId, gradeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canAddHandOut'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static IList<LMSDomainCoreModelsCourseView> GetMyCourses(this ICourseApi operations, string lang, bool? canAddHandOut = default(bool?), int? pageSize = default(int?), int? pageNumber = default(int?))
            {
                return operations.GetMyCoursesAsync(lang, canAddHandOut, pageSize, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canAddHandOut'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsCourseView>> GetMyCoursesAsync(this ICourseApi operations, string lang, bool? canAddHandOut = default(bool?), int? pageSize = default(int?), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyCoursesWithHttpMessagesAsync(lang, canAddHandOut, pageSize, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canAddHandOut'>
            /// </param>
            public static int? GetMyTeachingCoursesCount(this ICourseApi operations, string lang, bool? canAddHandOut = default(bool?))
            {
                return operations.GetMyTeachingCoursesCountAsync(lang, canAddHandOut).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canAddHandOut'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetMyTeachingCoursesCountAsync(this ICourseApi operations, string lang, bool? canAddHandOut = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyTeachingCoursesCountWithHttpMessagesAsync(lang, canAddHandOut, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canAddHandOut'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            public static IList<LMSDomainCoreModelsCourseView> GetSchoolCourses(this ICourseApi operations, string lang, bool? canAddHandOut = default(bool?), int? pageSize = default(int?), int? pageNumber = default(int?), IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), int? subjectId = default(int?), int? gradeId = default(int?))
            {
                return operations.GetSchoolCoursesAsync(lang, canAddHandOut, pageSize, pageNumber, schoolIds, includeSchoolChilds, subjectId, gradeId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='canAddHandOut'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsCourseView>> GetSchoolCoursesAsync(this ICourseApi operations, string lang, bool? canAddHandOut = default(bool?), int? pageSize = default(int?), int? pageNumber = default(int?), IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), int? subjectId = default(int?), int? gradeId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolCoursesWithHttpMessagesAsync(lang, canAddHandOut, pageSize, pageNumber, schoolIds, includeSchoolChilds, subjectId, gradeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            public static IList<LMSDomainCoreModelsCourseView> GetMyMenteesCoursesViewList(this ICourseApi operations, string lang, int? pageSize = default(int?), int? pageNumber = default(int?), IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), int? subjectId = default(int?), int? gradeId = default(int?))
            {
                return operations.GetMyMenteesCoursesViewListAsync(lang, pageSize, pageNumber, schoolIds, includeSchoolChilds, subjectId, gradeId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsCourseView>> GetMyMenteesCoursesViewListAsync(this ICourseApi operations, string lang, int? pageSize = default(int?), int? pageNumber = default(int?), IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), int? subjectId = default(int?), int? gradeId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyMenteesCoursesViewListWithHttpMessagesAsync(lang, pageSize, pageNumber, schoolIds, includeSchoolChilds, subjectId, gradeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAddSessionReminderViewModel GetAddSessionReminderDetails(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetAddSessionReminderDetailsAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAddSessionReminderViewModel> GetAddSessionReminderDetailsAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAddSessionReminderDetailsWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='leaveCourseCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object LeaveCourse(this ICourseApi operations, LMSApplicationCoreCommandsLeaveCourseCommand leaveCourseCommand, string lang)
            {
                return operations.LeaveCourseAsync(leaveCourseCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='leaveCourseCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LeaveCourseAsync(this ICourseApi operations, LMSApplicationCoreCommandsLeaveCourseCommand leaveCourseCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LeaveCourseWithHttpMessagesAsync(leaveCourseCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelLearnerBasicInfo> GetCourseRequests(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseRequestsAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelLearnerBasicInfo>> GetCourseRequestsAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseRequestsWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseRequestCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object UpdateUserCourseRequestStatus(this ICourseApi operations, LMSApplicationCoreCommandsCourseRequestCommand courseRequestCommand, string lang)
            {
                return operations.UpdateUserCourseRequestStatusAsync(courseRequestCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseRequestCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserCourseRequestStatusAsync(this ICourseApi operations, LMSApplicationCoreCommandsCourseRequestCommand courseRequestCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserCourseRequestStatusWithHttpMessagesAsync(courseRequestCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAssessmentLearnerActivitiesProgressSummaryViewModel> GetLearnerOverAllReport(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetLearnerOverAllReportAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAssessmentLearnerActivitiesProgressSummaryViewModel>> GetLearnerOverAllReportAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearnerOverAllReportWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='assessmentId'>
            /// </param>
            /// <param name='learnerId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetLearnerAssessment(this ICourseApi operations, int courseId, string assessmentId, string learnerId, string lang)
            {
                return operations.GetLearnerAssessmentAsync(courseId, assessmentId, learnerId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='assessmentId'>
            /// </param>
            /// <param name='learnerId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLearnerAssessmentAsync(this ICourseApi operations, int courseId, string assessmentId, string learnerId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearnerAssessmentWithHttpMessagesAsync(courseId, assessmentId, learnerId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object IsCourseGamificationEnabled(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.IsCourseGamificationEnabledAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsCourseGamificationEnabledAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCourseGamificationEnabledWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? GetIsRoundsEnabled(this ICourseApi operations, string lang)
            {
                return operations.GetIsRoundsEnabledAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> GetIsRoundsEnabledAsync(this ICourseApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIsRoundsEnabledWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object AssignAndUnAssignLearners(this ICourseApi operations, LMSApplicationCoreAssignLearnerCommand command, string lang)
            {
                return operations.AssignAndUnAssignLearnersAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AssignAndUnAssignLearnersAsync(this ICourseApi operations, LMSApplicationCoreAssignLearnerCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssignAndUnAssignLearnersWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object AssignUnAssignAllLearners(this ICourseApi operations, LMSApplicationCoreViewModelAssignAllLearnersCommand command, string lang)
            {
                return operations.AssignUnAssignAllLearnersAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AssignUnAssignAllLearnersAsync(this ICourseApi operations, LMSApplicationCoreViewModelAssignAllLearnersCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssignUnAssignAllLearnersWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseLearningObjectiveViewModel> GetCourseLearningObjectives(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseLearningObjectivesAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseLearningObjectiveViewModel>> GetCourseLearningObjectivesAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseLearningObjectivesWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='videoUrl'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetUpdatedBrightcoveVideoUrl(this ICourseApi operations, string videoUrl, string lang)
            {
                return operations.GetUpdatedBrightcoveVideoUrlAsync(videoUrl, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='videoUrl'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetUpdatedBrightcoveVideoUrlAsync(this ICourseApi operations, string videoUrl, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUpdatedBrightcoveVideoUrlWithHttpMessagesAsync(videoUrl, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteCourseGroupCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteCourseGroup(this ICourseApi operations, LMSApplicationCoreCommandsDeleteCourseGroupCommand deleteCourseGroupCommand, string lang)
            {
                return operations.DeleteCourseGroupAsync(deleteCourseGroupCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteCourseGroupCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCourseGroupAsync(this ICourseApi operations, LMSApplicationCoreCommandsDeleteCourseGroupCommand deleteCourseGroupCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCourseGroupWithHttpMessagesAsync(deleteCourseGroupCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteCourseCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteCourse(this ICourseApi operations, LMSApplicationCoreCommandsDeleteCourseCommand deleteCourseCommand, string lang)
            {
                return operations.DeleteCourseAsync(deleteCourseCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteCourseCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCourseAsync(this ICourseApi operations, LMSApplicationCoreCommandsDeleteCourseCommand deleteCourseCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCourseWithHttpMessagesAsync(deleteCourseCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object UpdateCompletionStatusForSchools(this ICourseApi operations, LMSApplicationCoreCommandsUpdateCourseProgressCommand command, string lang)
            {
                return operations.UpdateCompletionStatusForSchoolsAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateCompletionStatusForSchoolsAsync(this ICourseApi operations, LMSApplicationCoreCommandsUpdateCourseProgressCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCompletionStatusForSchoolsWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object UpdateCompletionStatusForOrganizations(this ICourseApi operations, LMSApplicationCoreCommandsUpdateCourseProgressCommand command, string lang)
            {
                return operations.UpdateCompletionStatusForOrganizationsAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateCompletionStatusForOrganizationsAsync(this ICourseApi operations, LMSApplicationCoreCommandsUpdateCourseProgressCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCompletionStatusForOrganizationsWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            public static int? GetArchivedCoursesCount(this ICourseApi operations, string lang, IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?))
            {
                return operations.GetArchivedCoursesCountAsync(lang, schoolIds, includeSchoolChilds).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetArchivedCoursesCountAsync(this ICourseApi operations, string lang, IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArchivedCoursesCountWithHttpMessagesAsync(lang, schoolIds, includeSchoolChilds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseGroupViewModel> GetArchivedCourses(this ICourseApi operations, string lang, IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), int? pageNumber = default(int?))
            {
                return operations.GetArchivedCoursesAsync(lang, schoolIds, includeSchoolChilds, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseGroupViewModel>> GetArchivedCoursesAsync(this ICourseApi operations, string lang, IList<string> schoolIds = default(IList<string>), bool? includeSchoolChilds = default(bool?), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArchivedCoursesWithHttpMessagesAsync(lang, schoolIds, includeSchoolChilds, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='session'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSessionViewModel AddSession(this ICourseApi operations, LMSApplicationCoreCommandsSessionAddCommand session, string lang)
            {
                return operations.AddSessionAsync(session, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='session'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSessionViewModel> AddSessionAsync(this ICourseApi operations, LMSApplicationCoreCommandsSessionAddCommand session, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddSessionWithHttpMessagesAsync(session, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsSession GetSession(this ICourseApi operations, string sessionId, string lang)
            {
                return operations.GetSessionAsync(sessionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsSession> GetSessionAsync(this ICourseApi operations, string sessionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionWithHttpMessagesAsync(sessionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSessionDetailsViewModel GetSessionDetails(this ICourseApi operations, string sessionId, string lang)
            {
                return operations.GetSessionDetailsAsync(sessionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSessionDetailsViewModel> GetSessionDetailsAsync(this ICourseApi operations, string sessionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionDetailsWithHttpMessagesAsync(sessionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSessionViewModel> GetSessionsByCourseId(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetSessionsByCourseIdAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSessionViewModel>> GetSessionsByCourseIdAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsByCourseIdWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAttendanceSessionViewModel> GetSessionsTillNowByCourseId(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetSessionsTillNowByCourseIdAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAttendanceSessionViewModel>> GetSessionsTillNowByCourseIdAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsTillNowByCourseIdWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='studentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAttendanceSessionViewModel> GetSessionsTillNow(this ICourseApi operations, int courseId, int studentId, string lang)
            {
                return operations.GetSessionsTillNowAsync(courseId, studentId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='studentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAttendanceSessionViewModel>> GetSessionsTillNowAsync(this ICourseApi operations, int courseId, int studentId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsTillNowWithHttpMessagesAsync(courseId, studentId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? IsExistSessionsHasAttendance(this ICourseApi operations, int courseId, string lang)
            {
                return operations.IsExistSessionsHasAttendanceAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsExistSessionsHasAttendanceAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsExistSessionsHasAttendanceWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static bool? IsEnableAttendance(this ICourseApi operations, string lang, int? courseId = default(int?))
            {
                return operations.IsEnableAttendanceAsync(lang, courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsEnableAttendanceAsync(this ICourseApi operations, string lang, int? courseId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsEnableAttendanceWithHttpMessagesAsync(lang, courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchQuery'>
            /// </param>
            /// <param name='selectedSchoolIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelTeacherDetails> GetOrganizationInstructorsBySchoolIds(this ICourseApi operations, string searchQuery, IList<string> selectedSchoolIds, string lang, int? courseId = default(int?), int? pageNumber = default(int?))
            {
                return operations.GetOrganizationInstructorsBySchoolIdsAsync(searchQuery, selectedSchoolIds, lang, courseId, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchQuery'>
            /// </param>
            /// <param name='selectedSchoolIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelTeacherDetails>> GetOrganizationInstructorsBySchoolIdsAsync(this ICourseApi operations, string searchQuery, IList<string> selectedSchoolIds, string lang, int? courseId = default(int?), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganizationInstructorsBySchoolIdsWithHttpMessagesAsync(searchQuery, selectedSchoolIds, lang, courseId, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchQuery'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelTeacherDetails> GetOrganizationInstructors(this ICourseApi operations, string searchQuery, string lang, int? courseId = default(int?), int? pageNumber = default(int?))
            {
                return operations.GetOrganizationInstructorsAsync(searchQuery, lang, courseId, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchQuery'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelTeacherDetails>> GetOrganizationInstructorsAsync(this ICourseApi operations, string searchQuery, string lang, int? courseId = default(int?), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganizationInstructorsWithHttpMessagesAsync(searchQuery, lang, courseId, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roundId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelRoundDetailsViewModel GetCourseRoundDetails(this ICourseApi operations, int roundId, string lang)
            {
                return operations.GetCourseRoundDetailsAsync(roundId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roundId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelRoundDetailsViewModel> GetCourseRoundDetailsAsync(this ICourseApi operations, int roundId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseRoundDetailsWithHttpMessagesAsync(roundId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='session'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void DeleteSession(this ICourseApi operations, LMSApplicationCoreCommandsSessionDeleteCommand session, string lang)
            {
                operations.DeleteSessionAsync(session, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='session'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSessionAsync(this ICourseApi operations, LMSApplicationCoreCommandsSessionDeleteCommand session, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSessionWithHttpMessagesAsync(session, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='joinCourseCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelJoinCourseViewModel JoinCourse(this ICourseApi operations, LMSApplicationCoreCommandsJoinCourseCommand joinCourseCommand, string lang)
            {
                return operations.JoinCourseAsync(joinCourseCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='joinCourseCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelJoinCourseViewModel> JoinCourseAsync(this ICourseApi operations, LMSApplicationCoreCommandsJoinCourseCommand joinCourseCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.JoinCourseWithHttpMessagesAsync(joinCourseCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSWebCoreViewModelsAddEditCourseViewModel GetCourseAddEditDetails(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseAddEditDetailsAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSWebCoreViewModelsAddEditCourseViewModel> GetCourseAddEditDetailsAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseAddEditDetailsWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseStudentAwardsViewModel> GetCourseStudentsAwards(this ICourseApi operations, int courseId, string lang, int? pageNumber = default(int?))
            {
                return operations.GetCourseStudentsAwardsAsync(courseId, lang, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseStudentAwardsViewModel>> GetCourseStudentsAwardsAsync(this ICourseApi operations, int courseId, string lang, int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseStudentsAwardsWithHttpMessagesAsync(courseId, lang, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseStudentsViewModel> GetCourseStudents(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseStudentsAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseStudentsViewModel>> GetCourseStudentsAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseStudentsWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseMembersViewModel> GetCourseTeachers(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseTeachersAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseMembersViewModel>> GetCourseTeachersAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseTeachersWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseMembersViewModel> GetCourseMembers(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseMembersAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseMembersViewModel>> GetCourseMembersAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseMembersWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseMembersViewModel> GetCourseMembersExceptLearningCategory(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseMembersExceptLearningCategoryAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseMembersViewModel>> GetCourseMembersExceptLearningCategoryAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseMembersExceptLearningCategoryWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getLearnersCount'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseLearnersViewModel GetCourseLearningCategoryMembers(this ICourseApi operations, int courseId, int pageIndex, int pageSize, string lang, bool? getLearnersCount = default(bool?))
            {
                return operations.GetCourseLearningCategoryMembersAsync(courseId, pageIndex, pageSize, lang, getLearnersCount).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getLearnersCount'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseLearnersViewModel> GetCourseLearningCategoryMembersAsync(this ICourseApi operations, int courseId, int pageIndex, int pageSize, string lang, bool? getLearnersCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseLearningCategoryMembersWithHttpMessagesAsync(courseId, pageIndex, pageSize, lang, getLearnersCount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseMembersViewModel GetCourseAdmin(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseAdminAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseMembersViewModel> GetCourseAdminAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseAdminWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='changeRoleCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object ChangeMemberRoleInCourse(this ICourseApi operations, LMSApplicationCoreCommandsChangeMemberRoleCommand changeRoleCommand, string lang)
            {
                return operations.ChangeMemberRoleInCourseAsync(changeRoleCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='changeRoleCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangeMemberRoleInCourseAsync(this ICourseApi operations, LMSApplicationCoreCommandsChangeMemberRoleCommand changeRoleCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeMemberRoleInCourseWithHttpMessagesAsync(changeRoleCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editAboutCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object EditAbout(this ICourseApi operations, LMSApplicationCoreCommandsEditAboutCommand editAboutCommand, string lang)
            {
                return operations.EditAboutAsync(editAboutCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editAboutCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditAboutAsync(this ICourseApi operations, LMSApplicationCoreCommandsEditAboutCommand editAboutCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditAboutWithHttpMessagesAsync(editAboutCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseAboutViewModel GetAbout(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetAboutAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseAboutViewModel> GetAboutAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAboutWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseInfoViewModel GetCourseInfo(this ICourseApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseInfoAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseInfoViewModel> GetCourseInfoAsync(this ICourseApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseInfoWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseInfoViewModel GetCourseInfoWithPrerequsists(this ICourseApi operations, int courseGroupId, int contextTypeId, string lang)
            {
                return operations.GetCourseInfoWithPrerequsistsAsync(courseGroupId, contextTypeId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseInfoViewModel> GetCourseInfoWithPrerequsistsAsync(this ICourseApi operations, int courseGroupId, int contextTypeId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseInfoWithPrerequsistsWithHttpMessagesAsync(courseGroupId, contextTypeId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseRatingViewModel GetCourseRating(this ICourseApi operations, int courseId, string lang)
            {
                return operations.GetCourseRatingAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseRatingViewModel> GetCourseRatingAsync(this ICourseApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseRatingWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='applyOnSubSchool'>
            /// </param>
            public static object GetSubjects(this ICourseApi operations, string lang, bool? applyOnSubSchool = default(bool?))
            {
                return operations.GetSubjectsAsync(lang, applyOnSubSchool).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='applyOnSubSchool'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubjectsAsync(this ICourseApi operations, string lang, bool? applyOnSubSchool = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubjectsWithHttpMessagesAsync(lang, applyOnSubSchool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            public static object GetSubjectsBySchoolIds(this ICourseApi operations, IList<string> schoolIds, string lang, bool? includeSchoolChilds = default(bool?))
            {
                return operations.GetSubjectsBySchoolIdsAsync(schoolIds, lang, includeSchoolChilds).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubjectsBySchoolIdsAsync(this ICourseApi operations, IList<string> schoolIds, string lang, bool? includeSchoolChilds = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubjectsBySchoolIdsWithHttpMessagesAsync(schoolIds, lang, includeSchoolChilds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ratingCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object RateCourse(this ICourseApi operations, LMSApplicationCoreRatingCommand ratingCommand, string lang)
            {
                return operations.RateCourseAsync(ratingCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ratingCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RateCourseAsync(this ICourseApi operations, LMSApplicationCoreRatingCommand ratingCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RateCourseWithHttpMessagesAsync(ratingCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetCourseLearnersAssessmentsProgress(this ICourseApi operations, string courseId, string lang)
            {
                return operations.GetCourseLearnersAssessmentsProgressAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCourseLearnersAssessmentsProgressAsync(this ICourseApi operations, string courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseLearnersAssessmentsProgressWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='applyOnSubSchool'>
            /// </param>
            public static object GetGrades(this ICourseApi operations, string lang, bool? applyOnSubSchool = default(bool?))
            {
                return operations.GetGradesAsync(lang, applyOnSubSchool).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='applyOnSubSchool'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGradesAsync(this ICourseApi operations, string lang, bool? applyOnSubSchool = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGradesWithHttpMessagesAsync(lang, applyOnSubSchool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            public static object GetGradesBySchoolIds(this ICourseApi operations, IList<string> schoolIds, string lang, bool? includeSchoolChilds = default(bool?))
            {
                return operations.GetGradesBySchoolIdsAsync(schoolIds, lang, includeSchoolChilds).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='includeSchoolChilds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGradesBySchoolIdsAsync(this ICourseApi operations, IList<string> schoolIds, string lang, bool? includeSchoolChilds = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGradesBySchoolIdsWithHttpMessagesAsync(schoolIds, lang, includeSchoolChilds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editObjectiviesCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object EditCourseObjectivies(this ICourseApi operations, LMSApplicationCoreCommandsEditObjectiviesCommand editObjectiviesCommand, string lang)
            {
                return operations.EditCourseObjectiviesAsync(editObjectiviesCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editObjectiviesCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditCourseObjectiviesAsync(this ICourseApi operations, LMSApplicationCoreCommandsEditObjectiviesCommand editObjectiviesCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCourseObjectiviesWithHttpMessagesAsync(editObjectiviesCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateCourseCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object EnableCourseLearningPath(this ICourseApi operations, LMSApplicationCoreCommandsUpdateCourseGroupCommand updateCourseCommand, string lang)
            {
                return operations.EnableCourseLearningPathAsync(updateCourseCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateCourseCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EnableCourseLearningPathAsync(this ICourseApi operations, LMSApplicationCoreCommandsUpdateCourseGroupCommand updateCourseCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnableCourseLearningPathWithHttpMessagesAsync(updateCourseCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='learningPathThemCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object SetLearningPathTheme(this ICourseApi operations, LMSApplicationCoreCommandsLearningPathThemCommand learningPathThemCommand, string lang)
            {
                return operations.SetLearningPathThemeAsync(learningPathThemCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='learningPathThemCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetLearningPathThemeAsync(this ICourseApi operations, LMSApplicationCoreCommandsLearningPathThemCommand learningPathThemCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetLearningPathThemeWithHttpMessagesAsync(learningPathThemCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelLearningPathLearningPathThemeViewModel GetLearningPathTheme(this ICourseApi operations, int courseId, int courseGroupId, string lang)
            {
                return operations.GetLearningPathThemeAsync(courseId, courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelLearningPathLearningPathThemeViewModel> GetLearningPathThemeAsync(this ICourseApi operations, int courseId, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearningPathThemeWithHttpMessagesAsync(courseId, courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='course'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object PublishCourse(this ICourseApi operations, object course, string lang)
            {
                return operations.PublishCourseAsync(course, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='course'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PublishCourseAsync(this ICourseApi operations, object course, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PublishCourseWithHttpMessagesAsync(course, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='status'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void UpdateCourseIsFinalAssessmentCreatedAndStaus(this ICourseApi operations, int courseId, bool status, string lang)
            {
                operations.UpdateCourseIsFinalAssessmentCreatedAndStausAsync(courseId, status, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='status'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateCourseIsFinalAssessmentCreatedAndStausAsync(this ICourseApi operations, int courseId, bool status, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateCourseIsFinalAssessmentCreatedAndStausWithHttpMessagesAsync(courseId, status, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='status'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void UpdateIsFinalAssessmentPublishingStaus(this ICourseApi operations, int courseId, bool status, string lang)
            {
                operations.UpdateIsFinalAssessmentPublishingStausAsync(courseId, status, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='status'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateIsFinalAssessmentPublishingStausAsync(this ICourseApi operations, int courseId, bool status, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateIsFinalAssessmentPublishingStausWithHttpMessagesAsync(courseId, status, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
