// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SystemAdministrationApi.
    /// </summary>
    public static partial class SystemAdministrationApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOrganizationViewModel> GetOrganizations(this ISystemAdministrationApi operations, string lang)
            {
                return operations.GetOrganizationsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOrganizationViewModel>> GetOrganizationsAsync(this ISystemAdministrationApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganizationsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365SchoolBasicInfoViewModel> GetSystemAdminSchoolsBasicInfo(this ISystemAdministrationApi operations, string lang)
            {
                return operations.GetSystemAdminSchoolsBasicInfoAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365SchoolBasicInfoViewModel>> GetSystemAdminSchoolsBasicInfoAsync(this ISystemAdministrationApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemAdminSchoolsBasicInfoWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365SchoolBasicInfoViewModel> GetSchoolsBasicInfoByOrgId(this ISystemAdministrationApi operations, string orgId, string lang)
            {
                return operations.GetSchoolsBasicInfoByOrgIdAsync(orgId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365SchoolBasicInfoViewModel>> GetSchoolsBasicInfoByOrgIdAsync(this ISystemAdministrationApi operations, string orgId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolsBasicInfoByOrgIdWithHttpMessagesAsync(orgId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelPushCourseGroupViewModel> GetCourseGroupsToPush(this ISystemAdministrationApi operations, string organizationId, string lang)
            {
                return operations.GetCourseGroupsToPushAsync(organizationId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelPushCourseGroupViewModel>> GetCourseGroupsToPushAsync(this ISystemAdministrationApi operations, string organizationId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupsToPushWithHttpMessagesAsync(organizationId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelPushCourseGroupViewModel> GetPushedCourseGroups(this ISystemAdministrationApi operations, string organizationId, string lang)
            {
                return operations.GetPushedCourseGroupsAsync(organizationId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelPushCourseGroupViewModel>> GetPushedCourseGroupsAsync(this ISystemAdministrationApi operations, string organizationId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPushedCourseGroupsWithHttpMessagesAsync(organizationId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pushCourseGroupsCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void PushCourseGroupsToOrganization(this ISystemAdministrationApi operations, LMSApplicationCoreCommandsPushCourseGroupsCommand pushCourseGroupsCommand, string lang)
            {
                operations.PushCourseGroupsToOrganizationAsync(pushCourseGroupsCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pushCourseGroupsCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PushCourseGroupsToOrganizationAsync(this ISystemAdministrationApi operations, LMSApplicationCoreCommandsPushCourseGroupsCommand pushCourseGroupsCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PushCourseGroupsToOrganizationWithHttpMessagesAsync(pushCourseGroupsCommand, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteOrganization(this ISystemAdministrationApi operations, string id, string lang)
            {
                return operations.DeleteOrganizationAsync(id, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteOrganizationAsync(this ISystemAdministrationApi operations, string id, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteOrganizationWithHttpMessagesAsync(id, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365CreateTenantViewModel CreateOrganization(this ISystemAdministrationApi operations, LMSApplicationCoreCommandsCreateOrganizationWithAdminCommand command, string lang)
            {
                return operations.CreateOrganizationAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365CreateTenantViewModel> CreateOrganizationAsync(this ISystemAdministrationApi operations, LMSApplicationCoreCommandsCreateOrganizationWithAdminCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrganizationWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsLanguage> GetAvailableLanguages(this ISystemAdministrationApi operations, string lang)
            {
                return operations.GetAvailableLanguagesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsLanguage>> GetAvailableLanguagesAsync(this ISystemAdministrationApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAvailableLanguagesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
