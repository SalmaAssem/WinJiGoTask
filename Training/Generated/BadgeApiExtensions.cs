// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BadgeApi.
    /// </summary>
    public static partial class BadgeApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelBadgeBadgesListViewModel> GetBadges(this IBadgeApi operations, string lang, string courseId = default(string))
            {
                return operations.GetBadgesAsync(lang, courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelBadgeBadgesListViewModel>> GetBadgesAsync(this IBadgeApi operations, string lang, string courseId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBadgesWithHttpMessagesAsync(lang, courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='badgePackId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelBadgeBadgePackViewModel> GetBadgePackDetails(this IBadgeApi operations, int badgePackId, string lang)
            {
                return operations.GetBadgePackDetailsAsync(badgePackId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='badgePackId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelBadgeBadgePackViewModel>> GetBadgePackDetailsAsync(this IBadgeApi operations, int badgePackId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBadgePackDetailsWithHttpMessagesAsync(badgePackId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='badgePackId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelBadgeBadgePackViewModel> GetBadgePackDetailsForCourse(this IBadgeApi operations, int badgePackId, int courseId, string lang)
            {
                return operations.GetBadgePackDetailsForCourseAsync(badgePackId, courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='badgePackId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelBadgeBadgePackViewModel>> GetBadgePackDetailsForCourseAsync(this IBadgeApi operations, int badgePackId, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBadgePackDetailsForCourseWithHttpMessagesAsync(badgePackId, courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assignBadgeCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelUserBadgeViewModel AssignBadge(this IBadgeApi operations, LMSApplicationCoreCommandsAssignBadgeCommand assignBadgeCommand, string lang)
            {
                return operations.AssignBadgeAsync(assignBadgeCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assignBadgeCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserBadgeViewModel> AssignBadgeAsync(this IBadgeApi operations, LMSApplicationCoreCommandsAssignBadgeCommand assignBadgeCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssignBadgeWithHttpMessagesAsync(assignBadgeCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelBadgeViewModel> GetUserBadges(this IBadgeApi operations, string contextId, int contextTypeId, string lang)
            {
                return operations.GetUserBadgesAsync(contextId, contextTypeId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelBadgeViewModel>> GetUserBadgesAsync(this IBadgeApi operations, string contextId, int contextTypeId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserBadgesWithHttpMessagesAsync(contextId, contextTypeId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='childCode'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAwardViewModel> GetGroupedUserBadges(this IBadgeApi operations, string contextId, int contextTypeId, string lang, string childCode = default(string))
            {
                return operations.GetGroupedUserBadgesAsync(contextId, contextTypeId, lang, childCode).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='childCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAwardViewModel>> GetGroupedUserBadgesAsync(this IBadgeApi operations, string contextId, int contextTypeId, string lang, string childCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupedUserBadgesWithHttpMessagesAsync(contextId, contextTypeId, lang, childCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelBadgeBadgeSummaryViewModel> GetUserBadgesSummary(this IBadgeApi operations, string contextId, int contextTypeId, int userId, string lang)
            {
                return operations.GetUserBadgesSummaryAsync(contextId, contextTypeId, userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelBadgeBadgeSummaryViewModel>> GetUserBadgesSummaryAsync(this IBadgeApi operations, string contextId, int contextTypeId, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserBadgesSummaryWithHttpMessagesAsync(contextId, contextTypeId, userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelBadgeViewModel GetLatestUserBadge(this IBadgeApi operations, string contextId, int contextTypeId, string lang)
            {
                return operations.GetLatestUserBadgeAsync(contextId, contextTypeId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelBadgeViewModel> GetLatestUserBadgeAsync(this IBadgeApi operations, string contextId, int contextTypeId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestUserBadgeWithHttpMessagesAsync(contextId, contextTypeId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addBadgeCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object AddBadge(this IBadgeApi operations, LMSApplicationCoreCommandsAddEditBadgeCommand addBadgeCommand, string lang)
            {
                return operations.AddBadgeAsync(addBadgeCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addBadgeCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddBadgeAsync(this IBadgeApi operations, LMSApplicationCoreCommandsAddEditBadgeCommand addBadgeCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddBadgeWithHttpMessagesAsync(addBadgeCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addBadgeCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object UpdateBadge(this IBadgeApi operations, LMSApplicationCoreCommandsAddEditBadgeCommand addBadgeCommand, string lang)
            {
                return operations.UpdateBadgeAsync(addBadgeCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addBadgeCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateBadgeAsync(this IBadgeApi operations, LMSApplicationCoreCommandsAddEditBadgeCommand addBadgeCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBadgeWithHttpMessagesAsync(addBadgeCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='badge'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteBadge(this IBadgeApi operations, object badge, string lang)
            {
                return operations.DeleteBadgeAsync(badge, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='badge'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteBadgeAsync(this IBadgeApi operations, object badge, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBadgeWithHttpMessagesAsync(badge, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsBadgesBadge UpdateBadgePoints(this IBadgeApi operations, LMSApplicationCoreCommandsUpdateBadgePointsCommand command, string lang)
            {
                return operations.UpdateBadgePointsAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsBadgesBadge> UpdateBadgePointsAsync(this IBadgeApi operations, LMSApplicationCoreCommandsUpdateBadgePointsCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBadgePointsWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelBadgeActivityBadgeViewModel GetActivityBadge(this IBadgeApi operations, string activityId, string lang)
            {
                return operations.GetActivityBadgeAsync(activityId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelBadgeActivityBadgeViewModel> GetActivityBadgeAsync(this IBadgeApi operations, string activityId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivityBadgeWithHttpMessagesAsync(activityId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialIdsList'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelBadgeActivityBadgeViewModel> LoadMaterialsBadgesList(this IBadgeApi operations, IList<string> materialIdsList, string lang)
            {
                return operations.LoadMaterialsBadgesListAsync(materialIdsList, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialIdsList'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelBadgeActivityBadgeViewModel>> LoadMaterialsBadgesListAsync(this IBadgeApi operations, IList<string> materialIdsList, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoadMaterialsBadgesListWithHttpMessagesAsync(materialIdsList, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
