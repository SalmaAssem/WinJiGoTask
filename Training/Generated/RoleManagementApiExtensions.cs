// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleManagementApi.
    /// </summary>
    public static partial class RoleManagementApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelRoleManagementViewModel GetRoles(this IRoleManagementApi operations, string lang)
            {
                return operations.GetRolesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelRoleManagementViewModel> GetRolesAsync(this IRoleManagementApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRolesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAddUpdateCustomRoleViewModel GetAddEditCustomRoleDetails(this IRoleManagementApi operations, string lang)
            {
                return operations.GetAddEditCustomRoleDetailsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAddUpdateCustomRoleViewModel> GetAddEditCustomRoleDetailsAsync(this IRoleManagementApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAddEditCustomRoleDetailsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addUpdateCustomRoleCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelRoleManagementViewModel SaveCustomRole(this IRoleManagementApi operations, LMSApplicationCoreCommandsAddUpdateCustomeRoleCommand addUpdateCustomRoleCommand, string lang)
            {
                return operations.SaveCustomRoleAsync(addUpdateCustomRoleCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addUpdateCustomRoleCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelRoleManagementViewModel> SaveCustomRoleAsync(this IRoleManagementApi operations, LMSApplicationCoreCommandsAddUpdateCustomeRoleCommand addUpdateCustomRoleCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveCustomRoleWithHttpMessagesAsync(addUpdateCustomRoleCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='level'>
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<IDictionary<string, IList<LMSApplicationCorePermissionsGroup>>> GetPermissionsByLevel(this IRoleManagementApi operations, int level, int category, string lang)
            {
                return operations.GetPermissionsByLevelAsync(level, category, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='level'>
            /// </param>
            /// <param name='category'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, IList<LMSApplicationCorePermissionsGroup>>>> GetPermissionsByLevelAsync(this IRoleManagementApi operations, int level, int category, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPermissionsByLevelWithHttpMessagesAsync(level, category, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? IsRoleUsed(this IRoleManagementApi operations, int roleId, string lang)
            {
                return operations.IsRoleUsedAsync(roleId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsRoleUsedAsync(this IRoleManagementApi operations, int roleId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsRoleUsedWithHttpMessagesAsync(roleId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteRole(this IRoleManagementApi operations, int roleId, string lang)
            {
                return operations.DeleteRoleAsync(roleId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRoleAsync(this IRoleManagementApi operations, int roleId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRoleWithHttpMessagesAsync(roleId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<IDictionary<string, IList<LMSApplicationCorePermissionsGroup>>> GetRolePermissions(this IRoleManagementApi operations, int roleId, string lang)
            {
                return operations.GetRolePermissionsAsync(roleId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, IList<LMSApplicationCorePermissionsGroup>>>> GetRolePermissionsAsync(this IRoleManagementApi operations, int roleId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRolePermissionsWithHttpMessagesAsync(roleId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
