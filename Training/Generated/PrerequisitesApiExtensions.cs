// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrerequisitesApi.
    /// </summary>
    public static partial class PrerequisitesApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditPrerequisiteCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPrerequisitesViewModel AddOrUpdate(this IPrerequisitesApi operations, LMSApplicationCoreCommandsPrerequisitesCommand addEditPrerequisiteCommand, string lang)
            {
                return operations.AddOrUpdateAsync(addEditPrerequisiteCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditPrerequisiteCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPrerequisitesViewModel> AddOrUpdateAsync(this IPrerequisitesApi operations, LMSApplicationCoreCommandsPrerequisitesCommand addEditPrerequisiteCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOrUpdateWithHttpMessagesAsync(addEditPrerequisiteCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditPrerequisiteCommands'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelPrerequisitesViewModel> AddOrDelete(this IPrerequisitesApi operations, IList<LMSApplicationCoreCommandsPrerequisitesCommand> addEditPrerequisiteCommands, string lang)
            {
                return operations.AddOrDeleteAsync(addEditPrerequisiteCommands, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditPrerequisiteCommands'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelPrerequisitesViewModel>> AddOrDeleteAsync(this IPrerequisitesApi operations, IList<LMSApplicationCoreCommandsPrerequisitesCommand> addEditPrerequisiteCommands, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOrDeleteWithHttpMessagesAsync(addEditPrerequisiteCommands, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletePrerequisiteCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteAll(this IPrerequisitesApi operations, LMSApplicationCoreCommandsPrerequisitesCommand deletePrerequisiteCommand, string lang)
            {
                return operations.DeleteAllAsync(deletePrerequisiteCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletePrerequisiteCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAllAsync(this IPrerequisitesApi operations, LMSApplicationCoreCommandsPrerequisitesCommand deletePrerequisiteCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAllWithHttpMessagesAsync(deletePrerequisiteCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelPrerequisitesViewModel> GetContextPrerequisites(this IPrerequisitesApi operations, string contextId, int contextTypeId, string lang)
            {
                return operations.GetContextPrerequisitesAsync(contextId, contextTypeId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelPrerequisitesViewModel>> GetContextPrerequisitesAsync(this IPrerequisitesApi operations, string contextId, int contextTypeId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContextPrerequisitesWithHttpMessagesAsync(contextId, contextTypeId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
