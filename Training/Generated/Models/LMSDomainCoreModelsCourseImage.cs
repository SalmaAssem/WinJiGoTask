// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class LMSDomainCoreModelsCourseImage
    {
        /// <summary>
        /// Initializes a new instance of the LMSDomainCoreModelsCourseImage
        /// class.
        /// </summary>
        public LMSDomainCoreModelsCourseImage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LMSDomainCoreModelsCourseImage
        /// class.
        /// </summary>
        public LMSDomainCoreModelsCourseImage(string url, string thumbnailUrl, string coverUrl, string previewCoverUrl, int? id = default(int?))
        {
            Id = id;
            Url = url;
            ThumbnailUrl = thumbnailUrl;
            CoverUrl = coverUrl;
            PreviewCoverUrl = previewCoverUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public int? Id { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ThumbnailUrl")]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CoverUrl")]
        public string CoverUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PreviewCoverUrl")]
        public string PreviewCoverUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (ThumbnailUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ThumbnailUrl");
            }
            if (CoverUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CoverUrl");
            }
            if (PreviewCoverUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PreviewCoverUrl");
            }
        }
    }
}
