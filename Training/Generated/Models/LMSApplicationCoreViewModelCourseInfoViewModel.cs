// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LMSApplicationCoreViewModelCourseInfoViewModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// LMSApplicationCoreViewModelCourseInfoViewModel class.
        /// </summary>
        public LMSApplicationCoreViewModelCourseInfoViewModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// LMSApplicationCoreViewModelCourseInfoViewModel class.
        /// </summary>
        public LMSApplicationCoreViewModelCourseInfoViewModel(int? courseId = default(int?), string about = default(string), string name = default(string), double? numberOfRaters = default(double?), double? rate = default(double?), string objectivies = default(string), string type = default(string), IList<LMSDomainCoreModelsCourse> courses = default(IList<LMSDomainCoreModelsCourse>), IList<LMSApplicationCoreViewModelUserCourseViewModel> userCourses = default(IList<LMSApplicationCoreViewModelUserCourseViewModel>), IList<string> tracks = default(IList<string>), IList<LMSApplicationCoreViewModelPrerequisitesViewModel> prerequists = default(IList<LMSApplicationCoreViewModelPrerequisitesViewModel>), LMSApplicationCoreViewModelInstructorViewModel instructor = default(LMSApplicationCoreViewModelInstructorViewModel), IList<LMSApplicationCoreViewModelInstructorViewModel> instructors = default(IList<LMSApplicationCoreViewModelInstructorViewModel>), IList<LMSDomainCoreModelsGrade> grade = default(IList<LMSDomainCoreModelsGrade>), int? studentsOnAllRoundsCount = default(int?), LMSDomainCoreModelsSubjectArea subject = default(LMSDomainCoreModelsSubjectArea), string objectiveFileId = default(string), string objectiveFileName = default(string), bool? isObjectiveContainsImage = default(bool?), string objectiveFileContentType = default(string), string objectiveFilePlayURL = default(string), string objectiveFileUri = default(string), string objectiveBlobName = default(string), bool? objectiveFileUnableToPlayOfficeDocument = default(bool?))
        {
            CourseId = courseId;
            About = about;
            Name = name;
            NumberOfRaters = numberOfRaters;
            Rate = rate;
            Objectivies = objectivies;
            Type = type;
            Courses = courses;
            UserCourses = userCourses;
            Tracks = tracks;
            Prerequists = prerequists;
            Instructor = instructor;
            Instructors = instructors;
            Grade = grade;
            StudentsOnAllRoundsCount = studentsOnAllRoundsCount;
            Subject = subject;
            ObjectiveFileId = objectiveFileId;
            ObjectiveFileName = objectiveFileName;
            IsObjectiveContainsImage = isObjectiveContainsImage;
            ObjectiveFileContentType = objectiveFileContentType;
            ObjectiveFilePlayURL = objectiveFilePlayURL;
            ObjectiveFileUri = objectiveFileUri;
            ObjectiveBlobName = objectiveBlobName;
            ObjectiveFileUnableToPlayOfficeDocument = objectiveFileUnableToPlayOfficeDocument;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CourseId")]
        public int? CourseId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "About")]
        public string About { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfRaters")]
        public double? NumberOfRaters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Rate")]
        public double? Rate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Objectivies")]
        public string Objectivies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Courses")]
        public IList<LMSDomainCoreModelsCourse> Courses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserCourses")]
        public IList<LMSApplicationCoreViewModelUserCourseViewModel> UserCourses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Tracks")]
        public IList<string> Tracks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Prerequists")]
        public IList<LMSApplicationCoreViewModelPrerequisitesViewModel> Prerequists { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Instructor")]
        public LMSApplicationCoreViewModelInstructorViewModel Instructor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Instructors")]
        public IList<LMSApplicationCoreViewModelInstructorViewModel> Instructors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Grade")]
        public IList<LMSDomainCoreModelsGrade> Grade { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StudentsOnAllRoundsCount")]
        public int? StudentsOnAllRoundsCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Subject")]
        public LMSDomainCoreModelsSubjectArea Subject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ObjectiveFileId")]
        public string ObjectiveFileId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ObjectiveFileName")]
        public string ObjectiveFileName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsObjectiveContainsImage")]
        public bool? IsObjectiveContainsImage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ObjectiveFileContentType")]
        public string ObjectiveFileContentType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ObjectiveFilePlayURL")]
        public string ObjectiveFilePlayURL { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ObjectiveFileUri")]
        public string ObjectiveFileUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ObjectiveBlobName")]
        public string ObjectiveBlobName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ObjectiveFileUnableToPlayOfficeDocument")]
        public bool? ObjectiveFileUnableToPlayOfficeDocument { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Courses != null)
            {
                foreach (var element in Courses)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Prerequists != null)
            {
                foreach (var element1 in Prerequists)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Grade != null)
            {
                foreach (var element2 in Grade)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Subject != null)
            {
                Subject.Validate();
            }
        }
    }
}
