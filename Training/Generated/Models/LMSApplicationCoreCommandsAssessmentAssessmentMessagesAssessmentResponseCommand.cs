// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentResponseCommand
    {
        /// <summary>
        /// Initializes a new instance of the
        /// LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentResponseCommand
        /// class.
        /// </summary>
        public LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentResponseCommand()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentResponseCommand
        /// class.
        /// </summary>
        public LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentResponseCommand(int? id = default(int?), string externalAssessmentId = default(string), int? type = default(int?), double? grade = default(double?), double? passingScore = default(double?), int? status = default(int?), string contextId = default(string), int? gradingMode = default(int?), string createdBy = default(string), IList<int?> assigneesIds = default(IList<int?>), bool? isSpecificAssignees = default(bool?), bool? isActive = default(bool?), IList<LMSApplicationCoreViewModelAssessmentAssessmentTrial> assessmentTrials = default(IList<LMSApplicationCoreViewModelAssessmentAssessmentTrial>), System.DateTime? dueDate = default(System.DateTime?), bool? allowLateSubmission = default(bool?), bool? isFinalAssessment = default(bool?), System.DateTime? publishingDate = default(System.DateTime?), IList<LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentAttributes> metaData = default(IList<LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentAttributes>), int? mode = default(int?))
        {
            Id = id;
            ExternalAssessmentId = externalAssessmentId;
            Type = type;
            Grade = grade;
            PassingScore = passingScore;
            Status = status;
            ContextId = contextId;
            GradingMode = gradingMode;
            CreatedBy = createdBy;
            AssigneesIds = assigneesIds;
            IsSpecificAssignees = isSpecificAssignees;
            IsActive = isActive;
            AssessmentTrials = assessmentTrials;
            DueDate = dueDate;
            AllowLateSubmission = allowLateSubmission;
            IsFinalAssessment = isFinalAssessment;
            PublishingDate = publishingDate;
            MetaData = metaData;
            Mode = mode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ExternalAssessmentId")]
        public string ExternalAssessmentId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public int? Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Grade")]
        public double? Grade { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PassingScore")]
        public double? PassingScore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public int? Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ContextId")]
        public string ContextId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "GradingMode")]
        public int? GradingMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AssigneesIds")]
        public IList<int?> AssigneesIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsSpecificAssignees")]
        public bool? IsSpecificAssignees { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assessmentTrials")]
        public IList<LMSApplicationCoreViewModelAssessmentAssessmentTrial> AssessmentTrials { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DueDate")]
        public System.DateTime? DueDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AllowLateSubmission")]
        public bool? AllowLateSubmission { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsFinalAssessment")]
        public bool? IsFinalAssessment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PublishingDate")]
        public System.DateTime? PublishingDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetaData")]
        public IList<LMSApplicationCoreCommandsAssessmentAssessmentMessagesAssessmentAttributes> MetaData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Mode")]
        public int? Mode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ContextId != null)
            {
                if (ContextId.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ContextId", 100);
                }
                if (ContextId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ContextId", 0);
                }
            }
        }
    }
}
