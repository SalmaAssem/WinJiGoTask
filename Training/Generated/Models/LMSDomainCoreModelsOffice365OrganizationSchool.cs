// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LMSDomainCoreModelsOffice365OrganizationSchool
    {
        /// <summary>
        /// Initializes a new instance of the
        /// LMSDomainCoreModelsOffice365OrganizationSchool class.
        /// </summary>
        public LMSDomainCoreModelsOffice365OrganizationSchool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// LMSDomainCoreModelsOffice365OrganizationSchool class.
        /// </summary>
        public LMSDomainCoreModelsOffice365OrganizationSchool(string schoolName, string organizationId, int evaluationCycleTypeId, string schoolLogo = default(string), bool? showNameWithLogo = default(bool?), string schoolLogoUrl = default(string), LMSDomainCoreModelsOffice365Organization organization = default(LMSDomainCoreModelsOffice365Organization), bool? allowExternalUsers = default(bool?), int? learnersAccessLevel = default(int?), string themeName = default(string), bool? isEnableRounds = default(bool?), bool? isEnableTracks = default(bool?), bool? isEnableChatBetweenLearners = default(bool?), bool? isEnableLearnersToAddSpace = default(bool?), bool? isEnableAttendance = default(bool?), bool? isEnableGradebook = default(bool?), bool? isEnableGradebookCustomization = default(bool?), bool? isCertificateEnabled = default(bool?), string customThemeColors = default(string), string externalId = default(string), string parentId = default(string), LMSDomainCoreModelsOffice365OrganizationSchool parentOrganizationSchool = default(LMSDomainCoreModelsOffice365OrganizationSchool), int? typeId = default(int?), LMSDomainCoreModelsOffice365OrganizationSchoolType organizationSchoolType = default(LMSDomainCoreModelsOffice365OrganizationSchoolType), IList<LMSDomainCoreModelsAttendancesOrganizationSchoolAttendanceStatus> organizationSchoolAttendanceStatus = default(IList<LMSDomainCoreModelsAttendancesOrganizationSchoolAttendanceStatus>), bool? disableSwitchNotifications = default(bool?), System.DateTime? creationDate = default(System.DateTime?), int? createdBy = default(int?), System.DateTime? lastModificationDate = default(System.DateTime?), int? modifiedBy = default(int?), string id = default(string))
        {
            SchoolName = schoolName;
            SchoolLogo = schoolLogo;
            ShowNameWithLogo = showNameWithLogo;
            SchoolLogoUrl = schoolLogoUrl;
            OrganizationId = organizationId;
            Organization = organization;
            AllowExternalUsers = allowExternalUsers;
            LearnersAccessLevel = learnersAccessLevel;
            ThemeName = themeName;
            IsEnableRounds = isEnableRounds;
            IsEnableTracks = isEnableTracks;
            IsEnableChatBetweenLearners = isEnableChatBetweenLearners;
            IsEnableLearnersToAddSpace = isEnableLearnersToAddSpace;
            IsEnableAttendance = isEnableAttendance;
            IsEnableGradebook = isEnableGradebook;
            IsEnableGradebookCustomization = isEnableGradebookCustomization;
            IsCertificateEnabled = isCertificateEnabled;
            CustomThemeColors = customThemeColors;
            EvaluationCycleTypeId = evaluationCycleTypeId;
            ExternalId = externalId;
            ParentId = parentId;
            ParentOrganizationSchool = parentOrganizationSchool;
            TypeId = typeId;
            OrganizationSchoolType = organizationSchoolType;
            OrganizationSchoolAttendanceStatus = organizationSchoolAttendanceStatus;
            DisableSwitchNotifications = disableSwitchNotifications;
            CreationDate = creationDate;
            CreatedBy = createdBy;
            LastModificationDate = lastModificationDate;
            ModifiedBy = modifiedBy;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SchoolName")]
        public string SchoolName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SchoolLogo")]
        public string SchoolLogo { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShowNameWithLogo")]
        public bool? ShowNameWithLogo { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SchoolLogoUrl")]
        public string SchoolLogoUrl { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OrganizationId")]
        public string OrganizationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Organization")]
        public LMSDomainCoreModelsOffice365Organization Organization { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AllowExternalUsers")]
        public bool? AllowExternalUsers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LearnersAccessLevel")]
        public int? LearnersAccessLevel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ThemeName")]
        public string ThemeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableRounds")]
        public bool? IsEnableRounds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableTracks")]
        public bool? IsEnableTracks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableChatBetweenLearners")]
        public bool? IsEnableChatBetweenLearners { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableLearnersToAddSpace")]
        public bool? IsEnableLearnersToAddSpace { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableAttendance")]
        public bool? IsEnableAttendance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableGradebook")]
        public bool? IsEnableGradebook { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableGradebookCustomization")]
        public bool? IsEnableGradebookCustomization { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsCertificateEnabled")]
        public bool? IsCertificateEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CustomThemeColors")]
        public string CustomThemeColors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EvaluationCycleTypeId")]
        public int EvaluationCycleTypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ExternalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentId")]
        public string ParentId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentOrganizationSchool")]
        public LMSDomainCoreModelsOffice365OrganizationSchool ParentOrganizationSchool { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TypeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OrganizationSchoolType")]
        public LMSDomainCoreModelsOffice365OrganizationSchoolType OrganizationSchoolType { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OrganizationSchoolAttendanceStatus")]
        public IList<LMSDomainCoreModelsAttendancesOrganizationSchoolAttendanceStatus> OrganizationSchoolAttendanceStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisableSwitchNotifications")]
        public bool? DisableSwitchNotifications { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreationDate")]
        public System.DateTime? CreationDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedBy")]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LastModificationDate")]
        public System.DateTime? LastModificationDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ModifiedBy")]
        public int? ModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SchoolName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SchoolName");
            }
            if (OrganizationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrganizationId");
            }
            if (Organization != null)
            {
                Organization.Validate();
            }
            if (ParentOrganizationSchool != null)
            {
                ParentOrganizationSchool.Validate();
            }
            if (OrganizationSchoolType != null)
            {
                OrganizationSchoolType.Validate();
            }
            if (OrganizationSchoolAttendanceStatus != null)
            {
                foreach (var element in OrganizationSchoolAttendanceStatus)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
