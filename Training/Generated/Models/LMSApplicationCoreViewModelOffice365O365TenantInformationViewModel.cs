// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LMSApplicationCoreViewModelOffice365O365TenantInformationViewModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// LMSApplicationCoreViewModelOffice365O365TenantInformationViewModel
        /// class.
        /// </summary>
        public LMSApplicationCoreViewModelOffice365O365TenantInformationViewModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// LMSApplicationCoreViewModelOffice365O365TenantInformationViewModel
        /// class.
        /// </summary>
        public LMSApplicationCoreViewModelOffice365O365TenantInformationViewModel(string displayName = default(string), string tenantLogoUrl = default(string), bool? applyLogoForAllSchools = default(bool?), bool? showEditPermissions = default(bool?), int? learnersAccessLevel = default(int?), bool? allowExternalUsers = default(bool?), string themeName = default(string), string eduShareUrl = default(string), string tenantNameInUrl = default(string), bool? isTrialLicense = default(bool?), bool? enableWhiteLabeling = default(bool?), bool? hideWinjiLogo = default(bool?), bool? isEnableRounds = default(bool?), bool? enableTraineeAsInstructor = default(bool?), bool? isEnableTracks = default(bool?), bool? isEnableChatBetweenLearners = default(bool?), bool? isEnableLearnersToAddSpace = default(bool?), bool? isEnableAttendance = default(bool?), bool? isEnableCustomizeAttendnaceStatusInSegments = default(bool?), bool? isCertificateEnabled = default(bool?), bool? disableSwitchNotifications = default(bool?), bool? isEnableHelpFiles = default(bool?), IList<LMSDomainCoreModelsSubjectArea> subjects = default(IList<LMSDomainCoreModelsSubjectArea>), IList<LMSDomainCoreModelsGrade> grades = default(IList<LMSDomainCoreModelsGrade>), int? offeringType = default(int?), string customBackgroundColor = default(string), string customForegroundColor = default(string), string customButtonColor = default(string), IList<LMSApplicationCoreViewModelOffice365ManageSubjectViewModel> subjectsWithTranslation = default(IList<LMSApplicationCoreViewModelOffice365ManageSubjectViewModel>), IList<LMSApplicationCoreViewModelOffice365ManageGradeViewModel> gradesWithTranslation = default(IList<LMSApplicationCoreViewModelOffice365ManageGradeViewModel>), IList<LMSApplicationCoreCommandsAttendanceStatusAddCommand> attendanceStatuses = default(IList<LMSApplicationCoreCommandsAttendanceStatusAddCommand>), bool? isEnableTimeTable = default(bool?), bool? isEnableGradebook = default(bool?), bool? isEnableScoreSheet = default(bool?), int? attendanceActiveMode = default(int?), string holidayFileId = default(string), string holidayFileName = default(string), string holidayFilePlayURL = default(string), IList<LMSApplicationCoreViewModelGradeBookGradeCategoryViewModel> gradeCategoriesList = default(IList<LMSApplicationCoreViewModelGradeBookGradeCategoryViewModel>))
        {
            DisplayName = displayName;
            TenantLogoUrl = tenantLogoUrl;
            ApplyLogoForAllSchools = applyLogoForAllSchools;
            ShowEditPermissions = showEditPermissions;
            LearnersAccessLevel = learnersAccessLevel;
            AllowExternalUsers = allowExternalUsers;
            ThemeName = themeName;
            EduShareUrl = eduShareUrl;
            TenantNameInUrl = tenantNameInUrl;
            IsTrialLicense = isTrialLicense;
            EnableWhiteLabeling = enableWhiteLabeling;
            HideWinjiLogo = hideWinjiLogo;
            IsEnableRounds = isEnableRounds;
            EnableTraineeAsInstructor = enableTraineeAsInstructor;
            IsEnableTracks = isEnableTracks;
            IsEnableChatBetweenLearners = isEnableChatBetweenLearners;
            IsEnableLearnersToAddSpace = isEnableLearnersToAddSpace;
            IsEnableAttendance = isEnableAttendance;
            IsEnableCustomizeAttendnaceStatusInSegments = isEnableCustomizeAttendnaceStatusInSegments;
            IsCertificateEnabled = isCertificateEnabled;
            DisableSwitchNotifications = disableSwitchNotifications;
            IsEnableHelpFiles = isEnableHelpFiles;
            Subjects = subjects;
            Grades = grades;
            OfferingType = offeringType;
            CustomBackgroundColor = customBackgroundColor;
            CustomForegroundColor = customForegroundColor;
            CustomButtonColor = customButtonColor;
            SubjectsWithTranslation = subjectsWithTranslation;
            GradesWithTranslation = gradesWithTranslation;
            AttendanceStatuses = attendanceStatuses;
            IsEnableTimeTable = isEnableTimeTable;
            IsEnableGradebook = isEnableGradebook;
            IsEnableScoreSheet = isEnableScoreSheet;
            AttendanceActiveMode = attendanceActiveMode;
            HolidayFileId = holidayFileId;
            HolidayFileName = holidayFileName;
            HolidayFilePlayURL = holidayFilePlayURL;
            GradeCategoriesList = gradeCategoriesList;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisplayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TenantLogoUrl")]
        public string TenantLogoUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ApplyLogoForAllSchools")]
        public bool? ApplyLogoForAllSchools { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShowEditPermissions")]
        public bool? ShowEditPermissions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LearnersAccessLevel")]
        public int? LearnersAccessLevel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AllowExternalUsers")]
        public bool? AllowExternalUsers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ThemeName")]
        public string ThemeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EduShareUrl")]
        public string EduShareUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TenantNameInUrl")]
        public string TenantNameInUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsTrialLicense")]
        public bool? IsTrialLicense { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableWhiteLabeling")]
        public bool? EnableWhiteLabeling { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HideWinjiLogo")]
        public bool? HideWinjiLogo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableRounds")]
        public bool? IsEnableRounds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableTraineeAsInstructor")]
        public bool? EnableTraineeAsInstructor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableTracks")]
        public bool? IsEnableTracks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableChatBetweenLearners")]
        public bool? IsEnableChatBetweenLearners { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableLearnersToAddSpace")]
        public bool? IsEnableLearnersToAddSpace { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableAttendance")]
        public bool? IsEnableAttendance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableCustomizeAttendnaceStatusInSegments")]
        public bool? IsEnableCustomizeAttendnaceStatusInSegments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsCertificateEnabled")]
        public bool? IsCertificateEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisableSwitchNotifications")]
        public bool? DisableSwitchNotifications { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableHelpFiles")]
        public bool? IsEnableHelpFiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Subjects")]
        public IList<LMSDomainCoreModelsSubjectArea> Subjects { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Grades")]
        public IList<LMSDomainCoreModelsGrade> Grades { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OfferingType")]
        public int? OfferingType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CustomBackgroundColor")]
        public string CustomBackgroundColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CustomForegroundColor")]
        public string CustomForegroundColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CustomButtonColor")]
        public string CustomButtonColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubjectsWithTranslation")]
        public IList<LMSApplicationCoreViewModelOffice365ManageSubjectViewModel> SubjectsWithTranslation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "GradesWithTranslation")]
        public IList<LMSApplicationCoreViewModelOffice365ManageGradeViewModel> GradesWithTranslation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AttendanceStatuses")]
        public IList<LMSApplicationCoreCommandsAttendanceStatusAddCommand> AttendanceStatuses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableTimeTable")]
        public bool? IsEnableTimeTable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableGradebook")]
        public bool? IsEnableGradebook { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnableScoreSheet")]
        public bool? IsEnableScoreSheet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AttendanceActiveMode")]
        public int? AttendanceActiveMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HolidayFileId")]
        public string HolidayFileId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HolidayFileName")]
        public string HolidayFileName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HolidayFilePlayURL")]
        public string HolidayFilePlayURL { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "GradeCategoriesList")]
        public IList<LMSApplicationCoreViewModelGradeBookGradeCategoryViewModel> GradeCategoriesList { get; set; }

    }
}
