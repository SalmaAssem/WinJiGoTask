// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FileApi.
    /// </summary>
    public static partial class FileApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filesIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void RemoveFilesMaterial(this IFileApi operations, LMSApplicationCoreCommandsRemoveFilesMaterialCommand filesIds, string lang)
            {
                operations.RemoveFilesMaterialAsync(filesIds, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filesIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveFilesMaterialAsync(this IFileApi operations, LMSApplicationCoreCommandsRemoveFilesMaterialCommand filesIds, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveFilesMaterialWithHttpMessagesAsync(filesIds, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetFileUri(this IFileApi operations, string fileId, string lang)
            {
                return operations.GetFileUriAsync(fileId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFileUriAsync(this IFileApi operations, string fileId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileUriWithHttpMessagesAsync(fileId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object UploadFileFromOneDriveToStorage(this IFileApi operations, LMSApplicationCoreCommandsOneDriveFileCommand file, string lang)
            {
                return operations.UploadFileFromOneDriveToStorageAsync(file, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UploadFileFromOneDriveToStorageAsync(this IFileApi operations, LMSApplicationCoreCommandsOneDriveFileCommand file, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadFileFromOneDriveToStorageWithHttpMessagesAsync(file, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetThemeTemplate(this IFileApi operations, string lang)
            {
                return operations.GetThemeTemplateAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetThemeTemplateAsync(this IFileApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThemeTemplateWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
