// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DiscussionApi.
    /// </summary>
    public static partial class DiscussionApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionId'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelDiscussionRepliesViewModel GetDiscussionDetails(this IDiscussionApi operations, string discussionId, int count, string lang)
            {
                return operations.GetDiscussionDetailsAsync(discussionId, count, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionId'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelDiscussionRepliesViewModel> GetDiscussionDetailsAsync(this IDiscussionApi operations, string discussionId, int count, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiscussionDetailsWithHttpMessagesAsync(discussionId, count, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelDiscussionInformationViewModel GetDiscussion(this IDiscussionApi operations, string discussionId, string lang)
            {
                return operations.GetDiscussionAsync(discussionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelDiscussionInformationViewModel> GetDiscussionAsync(this IDiscussionApi operations, string discussionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiscussionWithHttpMessagesAsync(discussionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionReplyAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelDiscussionReplyViewModel AddDiscussionReply(this IDiscussionApi operations, LMSApplicationCoreCommandsDiscussionReplyAddCommand discussionReplyAddCommand, string lang)
            {
                return operations.AddDiscussionReplyAsync(discussionReplyAddCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionReplyAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelDiscussionReplyViewModel> AddDiscussionReplyAsync(this IDiscussionApi operations, LMSApplicationCoreCommandsDiscussionReplyAddCommand discussionReplyAddCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDiscussionReplyWithHttpMessagesAsync(discussionReplyAddCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionDeleteReplyCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string DeleteDiscussionReply(this IDiscussionApi operations, LMSApplicationCoreCommandsDiscussionDeleteReplyCommand discussionDeleteReplyCommand, string lang)
            {
                return operations.DeleteDiscussionReplyAsync(discussionDeleteReplyCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionDeleteReplyCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteDiscussionReplyAsync(this IDiscussionApi operations, LMSApplicationCoreCommandsDiscussionDeleteReplyCommand discussionDeleteReplyCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDiscussionReplyWithHttpMessagesAsync(discussionDeleteReplyCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionEditReplyCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string EditDiscussionReply(this IDiscussionApi operations, LMSApplicationCoreCommandsDiscussionEditReplyCommand discussionEditReplyCommand, string lang)
            {
                return operations.EditDiscussionReplyAsync(discussionEditReplyCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discussionEditReplyCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> EditDiscussionReplyAsync(this IDiscussionApi operations, LMSApplicationCoreCommandsDiscussionEditReplyCommand discussionEditReplyCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditDiscussionReplyWithHttpMessagesAsync(discussionEditReplyCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
