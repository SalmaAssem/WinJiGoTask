// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TrackApi.
    /// </summary>
    public static partial class TrackApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trackId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelTrackTrackViewModel GetTrack(this ITrackApi operations, string trackId, string lang)
            {
                return operations.GetTrackAsync(trackId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trackId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTrackTrackViewModel> GetTrackAsync(this ITrackApi operations, string trackId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrackWithHttpMessagesAsync(trackId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditTrackCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelTrackTrackViewModel AddTrack(this ITrackApi operations, LMSApplicationCoreCommandsTrackAddEditTrackCommand addEditTrackCommand, string lang)
            {
                return operations.AddTrackAsync(addEditTrackCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditTrackCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTrackTrackViewModel> AddTrackAsync(this ITrackApi operations, LMSApplicationCoreCommandsTrackAddEditTrackCommand addEditTrackCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTrackWithHttpMessagesAsync(addEditTrackCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditTrackCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelTrackTrackViewModel UpdateTrack(this ITrackApi operations, LMSApplicationCoreCommandsTrackAddEditTrackCommand addEditTrackCommand, string lang)
            {
                return operations.UpdateTrackAsync(addEditTrackCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditTrackCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTrackTrackViewModel> UpdateTrackAsync(this ITrackApi operations, LMSApplicationCoreCommandsTrackAddEditTrackCommand addEditTrackCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTrackWithHttpMessagesAsync(addEditTrackCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditTrackCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelTrackCourseViewModel> AddCoursesToTrack(this ITrackApi operations, LMSApplicationCoreCommandsTrackAddDeleteCourseToTrackCommand addEditTrackCommand, string lang)
            {
                return operations.AddCoursesToTrackAsync(addEditTrackCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditTrackCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelTrackCourseViewModel>> AddCoursesToTrackAsync(this ITrackApi operations, LMSApplicationCoreCommandsTrackAddDeleteCourseToTrackCommand addEditTrackCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCoursesToTrackWithHttpMessagesAsync(addEditTrackCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelTrackUserTracksViewModel> GetUserTracks(this ITrackApi operations, string lang)
            {
                return operations.GetUserTracksAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelTrackUserTracksViewModel>> GetUserTracksAsync(this ITrackApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserTracksWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelTrackUserTracksViewModel> GetUserTracksWithCourses(this ITrackApi operations, string lang, int? pageSize = default(int?), int? pageNumber = default(int?))
            {
                return operations.GetUserTracksWithCoursesAsync(lang, pageSize, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelTrackUserTracksViewModel>> GetUserTracksWithCoursesAsync(this ITrackApi operations, string lang, int? pageSize = default(int?), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserTracksWithCoursesWithHttpMessagesAsync(lang, pageSize, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addDeleteCourseToTrackCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? RemoveCoursesFromTrack(this ITrackApi operations, LMSApplicationCoreCommandsTrackAddDeleteCourseToTrackCommand addDeleteCourseToTrackCommand, string lang)
            {
                return operations.RemoveCoursesFromTrackAsync(addDeleteCourseToTrackCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addDeleteCourseToTrackCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> RemoveCoursesFromTrackAsync(this ITrackApi operations, LMSApplicationCoreCommandsTrackAddDeleteCourseToTrackCommand addDeleteCourseToTrackCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveCoursesFromTrackWithHttpMessagesAsync(addDeleteCourseToTrackCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trackId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelUserProfileBasicInfoViewModel> GetTrackMembers(this ITrackApi operations, string trackId, string lang)
            {
                return operations.GetTrackMembersAsync(trackId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trackId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelUserProfileBasicInfoViewModel>> GetTrackMembersAsync(this ITrackApi operations, string trackId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrackMembersWithHttpMessagesAsync(trackId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? GetIsTracksEnabled(this ITrackApi operations, string lang)
            {
                return operations.GetIsTracksEnabledAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> GetIsTracksEnabledAsync(this ITrackApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIsTracksEnabledWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object AssignAndAudAssignLearners(this ITrackApi operations, LMSApplicationCoreTrackAssignLearnerCommand command, string lang)
            {
                return operations.AssignAndAudAssignLearnersAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AssignAndAudAssignLearnersAsync(this ITrackApi operations, LMSApplicationCoreTrackAssignLearnerCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssignAndAudAssignLearnersWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
