// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SessionApi.
    /// </summary>
    public static partial class SessionApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deactivateSessionCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsSession DeactivateSession(this ISessionApi operations, LMSApplicationCoreCommandsDeactivateSessionCommand deactivateSessionCommand, string lang)
            {
                return operations.DeactivateSessionAsync(deactivateSessionCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deactivateSessionCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsSession> DeactivateSessionAsync(this ISessionApi operations, LMSApplicationCoreCommandsDeactivateSessionCommand deactivateSessionCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeactivateSessionWithHttpMessagesAsync(deactivateSessionCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSessionUsersDetailsViewModel GetSessionUsersDetails(this ISessionApi operations, string sessionId, string lang)
            {
                return operations.GetSessionUsersDetailsAsync(sessionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSessionUsersDetailsViewModel> GetSessionUsersDetailsAsync(this ISessionApi operations, string sessionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionUsersDetailsWithHttpMessagesAsync(sessionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='session'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsSession ActivateSession(this ISessionApi operations, LMSApplicationCoreCommandsActivateSessionCommand session, string lang)
            {
                return operations.ActivateSessionAsync(session, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='session'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsSession> ActivateSessionAsync(this ISessionApi operations, LMSApplicationCoreCommandsActivateSessionCommand session, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivateSessionWithHttpMessagesAsync(session, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='approveSessionCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsSession ApproveSession(this ISessionApi operations, LMSApplicationCoreCommandsApproveSessionCommand approveSessionCommand, string lang)
            {
                return operations.ApproveSessionAsync(approveSessionCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='approveSessionCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsSession> ApproveSessionAsync(this ISessionApi operations, LMSApplicationCoreCommandsApproveSessionCommand approveSessionCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApproveSessionWithHttpMessagesAsync(approveSessionCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='session'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSessionDetailsViewModel UpdateSession(this ISessionApi operations, LMSApplicationCoreCommandsUpdateSessionCommand session, string lang)
            {
                return operations.UpdateSessionAsync(session, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='session'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSessionDetailsViewModel> UpdateSessionAsync(this ISessionApi operations, LMSApplicationCoreCommandsUpdateSessionCommand session, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSessionWithHttpMessagesAsync(session, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='childCode'>
            /// </param>
            public static object GetActiveSessionsAssesments(this ISessionApi operations, int courseId, string lang, string childCode = default(string))
            {
                return operations.GetActiveSessionsAssesmentsAsync(courseId, lang, childCode).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='childCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetActiveSessionsAssesmentsAsync(this ISessionApi operations, int courseId, string lang, string childCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveSessionsAssesmentsWithHttpMessagesAsync(courseId, lang, childCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAssessmentUpcomingActivitiesViewModel GetAssesmentsWithDueDate(this ISessionApi operations, int courseId, string lang)
            {
                return operations.GetAssesmentsWithDueDateAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssessmentUpcomingActivitiesViewModel> GetAssesmentsWithDueDateAsync(this ISessionApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssesmentsWithDueDateWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copiedJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? CopySession(this ISessionApi operations, LMSApplicationCoreCommandsCopySessionCommand copiedJson, string lang)
            {
                return operations.CopySessionAsync(copiedJson, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copiedJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CopySessionAsync(this ISessionApi operations, LMSApplicationCoreCommandsCopySessionCommand copiedJson, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopySessionWithHttpMessagesAsync(copiedJson, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAssessmentNotGradedViewModel> GetNotGradedAssesments(this ISessionApi operations, int courseId, string lang)
            {
                return operations.GetNotGradedAssesmentsAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAssessmentNotGradedViewModel>> GetNotGradedAssesmentsAsync(this ISessionApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotGradedAssesmentsWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createLiveLectureCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object CreateLiveLecture(this ISessionApi operations, LMSApplicationCoreCommandsCreateLiveLectureCommand createLiveLectureCommand, string lang)
            {
                return operations.CreateLiveLectureAsync(createLiveLectureCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createLiveLectureCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateLiveLectureAsync(this ISessionApi operations, LMSApplicationCoreCommandsCreateLiveLectureCommand createLiveLectureCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateLiveLectureWithHttpMessagesAsync(createLiveLectureCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copiedJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string CopySessions(this ISessionApi operations, LMSApplicationCoreCommandsCopySessionsCommand copiedJson, string lang)
            {
                return operations.CopySessionsAsync(copiedJson, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copiedJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CopySessionsAsync(this ISessionApi operations, LMSApplicationCoreCommandsCopySessionsCommand copiedJson, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopySessionsWithHttpMessagesAsync(copiedJson, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionOrderCommands'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreCommandsSessionOrderViewModel> OrderSessions(this ISessionApi operations, LMSApplicationCoreCommandsSessionsOrderCommand sessionOrderCommands, string lang)
            {
                return operations.OrderSessionsAsync(sessionOrderCommands, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionOrderCommands'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreCommandsSessionOrderViewModel>> OrderSessionsAsync(this ISessionApi operations, LMSApplicationCoreCommandsSessionsOrderCommand sessionOrderCommands, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OrderSessionsWithHttpMessagesAsync(sessionOrderCommands, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetActiveSessionsAssesmentsLearners(this ISessionApi operations, int courseId, string lang)
            {
                return operations.GetActiveSessionsAssesmentsLearnersAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetActiveSessionsAssesmentsLearnersAsync(this ISessionApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveSessionsAssesmentsLearnersWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
