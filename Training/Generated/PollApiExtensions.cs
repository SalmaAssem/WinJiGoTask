// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PollApi.
    /// </summary>
    public static partial class PollApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pollChoiceId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPollUserPollViewModel AddPollVote(this IPollApi operations, LMSApplicationCoreCommandsPollChoiceAddCommand pollChoiceId, string lang)
            {
                return operations.AddPollVoteAsync(pollChoiceId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pollChoiceId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPollUserPollViewModel> AddPollVoteAsync(this IPollApi operations, LMSApplicationCoreCommandsPollChoiceAddCommand pollChoiceId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPollVoteWithHttpMessagesAsync(pollChoiceId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pollId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsMaterialsPollChoice> GetPollChoicesByPollId(this IPollApi operations, string pollId, string lang)
            {
                return operations.GetPollChoicesByPollIdAsync(pollId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pollId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsMaterialsPollChoice>> GetPollChoicesByPollIdAsync(this IPollApi operations, string pollId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPollChoicesByPollIdWithHttpMessagesAsync(pollId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
