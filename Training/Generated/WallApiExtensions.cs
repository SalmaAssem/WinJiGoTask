// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WallApi.
    /// </summary>
    public static partial class WallApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wallPostAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPostViewModel AddPost(this IWallApi operations, LMSApplicationCoreCommandsWallPostAddCommand wallPostAddCommand, string lang)
            {
                return operations.AddPostAsync(wallPostAddCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wallPostAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPostViewModel> AddPostAsync(this IWallApi operations, LMSApplicationCoreCommandsWallPostAddCommand wallPostAddCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPostWithHttpMessagesAsync(wallPostAddCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wallPostEditCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPostViewModel UpdatePost(this IWallApi operations, LMSApplicationCoreCommandsWallPostEditCommand wallPostEditCommand, string lang)
            {
                return operations.UpdatePostAsync(wallPostEditCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wallPostEditCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPostViewModel> UpdatePostAsync(this IWallApi operations, LMSApplicationCoreCommandsWallPostEditCommand wallPostEditCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePostWithHttpMessagesAsync(wallPostEditCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletePostCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string DeletePost(this IWallApi operations, LMSApplicationCoreCommandsDeletePostCommand deletePostCommand, string lang)
            {
                return operations.DeletePostAsync(deletePostCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletePostCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeletePostAsync(this IWallApi operations, LMSApplicationCoreCommandsDeletePostCommand deletePostCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePostWithHttpMessagesAsync(deletePostCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='includeReflections'>
            /// </param>
            public static LMSApplicationCoreViewModelPostsListViewModel GetPostsByContextId(this IWallApi operations, string contextId, int contextTypeId, string lang, int? count = default(int?), bool? includeReflections = default(bool?))
            {
                return operations.GetPostsByContextIdAsync(contextId, contextTypeId, lang, count, includeReflections).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='includeReflections'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPostsListViewModel> GetPostsByContextIdAsync(this IWallApi operations, string contextId, int contextTypeId, string lang, int? count = default(int?), bool? includeReflections = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPostsByContextIdWithHttpMessagesAsync(contextId, contextTypeId, lang, count, includeReflections, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='postId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPostCommentsViewModel GetPostComments(this IWallApi operations, string postId, string lang)
            {
                return operations.GetPostCommentsAsync(postId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='postId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPostCommentsViewModel> GetPostCommentsAsync(this IWallApi operations, string postId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPostCommentsWithHttpMessagesAsync(postId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='postCommentAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCommentViewModel AddComment(this IWallApi operations, LMSApplicationCoreCommandsPostCommentAddCommand postCommentAddCommand, string lang)
            {
                return operations.AddCommentAsync(postCommentAddCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='postCommentAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCommentViewModel> AddCommentAsync(this IWallApi operations, LMSApplicationCoreCommandsPostCommentAddCommand postCommentAddCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCommentWithHttpMessagesAsync(postCommentAddCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editCommentCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCommentViewModel EditComment(this IWallApi operations, LMSApplicationCoreCommandsEditCommentCommand editCommentCommand, string lang)
            {
                return operations.EditCommentAsync(editCommentCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='editCommentCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCommentViewModel> EditCommentAsync(this IWallApi operations, LMSApplicationCoreCommandsEditCommentCommand editCommentCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCommentWithHttpMessagesAsync(editCommentCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteCommentCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string DeleteComment(this IWallApi operations, LMSApplicationCoreCommandsDeleteCommentCommand deleteCommentCommand, string lang)
            {
                return operations.DeleteCommentAsync(deleteCommentCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteCommentCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteCommentAsync(this IWallApi operations, LMSApplicationCoreCommandsDeleteCommentCommand deleteCommentCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCommentWithHttpMessagesAsync(deleteCommentCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
