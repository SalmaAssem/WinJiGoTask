// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Onenote.
    /// </summary>
    public static partial class OnenoteExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LMSDomainCoreModelsCourseView> GetCourses(this IOnenote operations)
            {
                return operations.GetCoursesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsCourseView>> GetCoursesAsync(this IOnenote operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoursesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelCourseStudentsViewModel> GetCourseTenantStudents(this IOnenote operations, int courseId)
            {
                return operations.GetCourseTenantStudentsAsync(courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelCourseStudentsViewModel>> GetCourseTenantStudentsAsync(this IOnenote operations, int courseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseTenantStudentsWithHttpMessagesAsync(courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSessionViewModel> GetSessionsByCourseId(this IOnenote operations, int courseId)
            {
                return operations.GetSessionsByCourseIdAsync(courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSessionViewModel>> GetSessionsByCourseIdAsync(this IOnenote operations, int courseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsByCourseIdWithHttpMessagesAsync(courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static IList<object> GetActiveSessionsAssesments(this IOnenote operations, int courseId)
            {
                return operations.GetActiveSessionsAssesmentsAsync(courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<object>> GetActiveSessionsAssesmentsAsync(this IOnenote operations, int courseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveSessionsAssesmentsWithHttpMessagesAsync(courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessment'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static LMSApplicationCoreViewModelAssessmentActivityResponseViewModel CreateActivity(this IOnenote operations, LMSApplicationCoreCommandsAssessmentAssessment assessment, int courseId)
            {
                return operations.CreateActivityAsync(assessment, courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assessment'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssessmentActivityResponseViewModel> CreateActivityAsync(this IOnenote operations, LMSApplicationCoreCommandsAssessmentAssessment assessment, int courseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateActivityWithHttpMessagesAsync(assessment, courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='assessmentId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            public static LMSApplicationCoreViewModelAssessmentActivityScoresViewModel GetActivityScores(this IOnenote operations, string contextId, int assessmentId, int courseId)
            {
                return operations.GetActivityScoresAsync(contextId, assessmentId, courseId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='assessmentId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssessmentActivityScoresViewModel> GetActivityScoresAsync(this IOnenote operations, string contextId, int assessmentId, int courseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivityScoresWithHttpMessagesAsync(contextId, assessmentId, courseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gradeCommand'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='assessmentId'>
            /// </param>
            public static bool? GradeActivity(this IOnenote operations, LMSApplicationCoreCommandsAssessmentGradeActivityCommand gradeCommand, int courseId, string contextId, int assessmentId)
            {
                return operations.GradeActivityAsync(gradeCommand, courseId, contextId, assessmentId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gradeCommand'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='assessmentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> GradeActivityAsync(this IOnenote operations, LMSApplicationCoreCommandsAssessmentGradeActivityCommand gradeCommand, int courseId, string contextId, int assessmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GradeActivityWithHttpMessagesAsync(gradeCommand, courseId, contextId, assessmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
