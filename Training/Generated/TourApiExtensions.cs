// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TourApi.
    /// </summary>
    public static partial class TourApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addTourPageUserCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string AddTourPageUser(this ITourApi operations, LMSApplicationCoreCommandsTourAddTourPageUserCommand addTourPageUserCommand, string lang)
            {
                return operations.AddTourPageUserAsync(addTourPageUserCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addTourPageUserCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> AddTourPageUserAsync(this ITourApi operations, LMSApplicationCoreCommandsTourAddTourPageUserCommand addTourPageUserCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTourPageUserWithHttpMessagesAsync(addTourPageUserCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string SkipWelcomeTour(this ITourApi operations, string lang)
            {
                return operations.SkipWelcomeTourAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> SkipWelcomeTourAsync(this ITourApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SkipWelcomeTourWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='module'>
            /// </param>
            /// <param name='moduleId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelTourPagesListViewModel GetIncompletedTourPages(this ITourApi operations, string module, string moduleId, string lang)
            {
                return operations.GetIncompletedTourPagesAsync(module, moduleId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='module'>
            /// </param>
            /// <param name='moduleId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTourPagesListViewModel> GetIncompletedTourPagesAsync(this ITourApi operations, string module, string moduleId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIncompletedTourPagesWithHttpMessagesAsync(module, moduleId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? ViewBadgeTourStep(this ITourApi operations, int courseId, string lang)
            {
                return operations.ViewBadgeTourStepAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ViewBadgeTourStepAsync(this ITourApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ViewBadgeTourStepWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void SkipBadgeTour(this ITourApi operations, string lang)
            {
                operations.SkipBadgeTourAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SkipBadgeTourAsync(this ITourApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SkipBadgeTourWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
