// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FormsTemplatesApi.
    /// </summary>
    public static partial class FormsTemplatesApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object CreateTemplate(this IFormsTemplatesApi operations, LMSApplicationCoreCommandsCreateTemplateCommand templateCommand, string lang)
            {
                return operations.CreateTemplateAsync(templateCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTemplateAsync(this IFormsTemplatesApi operations, LMSApplicationCoreCommandsCreateTemplateCommand templateCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTemplateWithHttpMessagesAsync(templateCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='templateType'>
            /// </param>
            public static IList<LMSDomainCoreViewModelsFormTemplateViewModel> GetTemplates(this IFormsTemplatesApi operations, int pageIndex, int pageSize, string lang, int? subjectId = default(int?), int? gradeId = default(int?), int? templateType = default(int?))
            {
                return operations.GetTemplatesAsync(pageIndex, pageSize, lang, subjectId, gradeId, templateType).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='subjectId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='templateType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreViewModelsFormTemplateViewModel>> GetTemplatesAsync(this IFormsTemplatesApi operations, int pageIndex, int pageSize, string lang, int? subjectId = default(int?), int? gradeId = default(int?), int? templateType = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTemplatesWithHttpMessagesAsync(pageIndex, pageSize, lang, subjectId, gradeId, templateType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteTemplate(this IFormsTemplatesApi operations, string templateId, string lang)
            {
                return operations.DeleteTemplateAsync(templateId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTemplateAsync(this IFormsTemplatesApi operations, string templateId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTemplateWithHttpMessagesAsync(templateId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
