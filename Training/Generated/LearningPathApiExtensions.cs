// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LearningPathApi.
    /// </summary>
    public static partial class LearningPathApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelLearningPathLearningPathViewModel GetLearningPath(this ILearningPathApi operations, int courseId, string lang)
            {
                return operations.GetLearningPathAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelLearningPathLearningPathViewModel> GetLearningPathAsync(this ILearningPathApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearningPathWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object IsCourseContainsLearningPath(this ILearningPathApi operations, int courseId, string lang)
            {
                return operations.IsCourseContainsLearningPathAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsCourseContainsLearningPathAsync(this ILearningPathApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCourseContainsLearningPathWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object IsLearningPathEnabled(this ILearningPathApi operations, int courseId, string lang)
            {
                return operations.IsLearningPathEnabledAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsLearningPathEnabledAsync(this ILearningPathApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsLearningPathEnabledWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseName'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='sessionName'>
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetSharingImageURL(this ILearningPathApi operations, string courseName, int courseId, int courseGroupId, string sessionName, string sessionId, string lang)
            {
                return operations.GetSharingImageURLAsync(courseName, courseId, courseGroupId, sessionName, sessionId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseName'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='sessionName'>
            /// </param>
            /// <param name='sessionId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSharingImageURLAsync(this ILearningPathApi operations, string courseName, int courseId, int courseGroupId, string sessionName, string sessionId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSharingImageURLWithHttpMessagesAsync(courseName, courseId, courseGroupId, sessionName, sessionId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
