// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CourseGroupAuthors.
    /// </summary>
    public static partial class CourseGroupAuthorsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAuthorViewModel> GetCourseGroupAuthors(this ICourseGroupAuthors operations, int courseGroupId, string lang)
            {
                return operations.GetCourseGroupAuthorsAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAuthorViewModel>> GetCourseGroupAuthorsAsync(this ICourseGroupAuthors operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupAuthorsWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAuthorViewModel> GetAllowedAuthorsForUser(this ICourseGroupAuthors operations, string keyword, string lang)
            {
                return operations.GetAllowedAuthorsForUserAsync(keyword, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyword'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAuthorViewModel>> GetAllowedAuthorsForUserAsync(this ICourseGroupAuthors operations, string keyword, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllowedAuthorsForUserWithHttpMessagesAsync(keyword, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupAuthorsCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void AddCourseGroupAuthors(this ICourseGroupAuthors operations, LMSApplicationCoreCommandsCourseGroupAuthorsCommand courseGroupAuthorsCommand, string lang)
            {
                operations.AddCourseGroupAuthorsAsync(courseGroupAuthorsCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupAuthorsCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddCourseGroupAuthorsAsync(this ICourseGroupAuthors operations, LMSApplicationCoreCommandsCourseGroupAuthorsCommand courseGroupAuthorsCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddCourseGroupAuthorsWithHttpMessagesAsync(courseGroupAuthorsCommand, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupAuthorCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAuthorViewModel AddAuthor(this ICourseGroupAuthors operations, LMSApplicationCoreCommandsCourseGroupAuthorCommand courseGroupAuthorCommand, string lang)
            {
                return operations.AddAuthorAsync(courseGroupAuthorCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupAuthorCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAuthorViewModel> AddAuthorAsync(this ICourseGroupAuthors operations, LMSApplicationCoreCommandsCourseGroupAuthorCommand courseGroupAuthorCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddAuthorWithHttpMessagesAsync(courseGroupAuthorCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupAuthorCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAuthorViewModel EditCourseGroupAuthor(this ICourseGroupAuthors operations, LMSApplicationCoreCommandsCourseGroupAuthorCommand courseGroupAuthorCommand, string lang)
            {
                return operations.EditCourseGroupAuthorAsync(courseGroupAuthorCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupAuthorCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAuthorViewModel> EditCourseGroupAuthorAsync(this ICourseGroupAuthors operations, LMSApplicationCoreCommandsCourseGroupAuthorCommand courseGroupAuthorCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCourseGroupAuthorWithHttpMessagesAsync(courseGroupAuthorCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='authorId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void DeleteCourseGroupAuthor(this ICourseGroupAuthors operations, int courseGroupId, int authorId, string lang)
            {
                operations.DeleteCourseGroupAuthorAsync(courseGroupId, authorId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='authorId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCourseGroupAuthorAsync(this ICourseGroupAuthors operations, int courseGroupId, int authorId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCourseGroupAuthorWithHttpMessagesAsync(courseGroupId, authorId, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseGroupViewModel GetCourseGroupsToAuthor(this ICourseGroupAuthors operations, int authorId, string lang)
            {
                return operations.GetCourseGroupsToAuthorAsync(authorId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseGroupViewModel> GetCourseGroupsToAuthorAsync(this ICourseGroupAuthors operations, int authorId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupsToAuthorWithHttpMessagesAsync(authorId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
