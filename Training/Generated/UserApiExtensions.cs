// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UserApi.
    /// </summary>
    public static partial class UserApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LMSApplicationCoreViewModelUserViewModel GetCurrentUserBasicProfileInfo(this IUserApi operations)
            {
                return operations.GetCurrentUserBasicProfileInfoAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserViewModel> GetCurrentUserBasicProfileInfoAsync(this IUserApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserBasicProfileInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='basicInfoUpdateCommand'>
            /// </param>
            public static LMSApplicationCoreViewModelUserViewModel SetCurrentUserBasicProfileInfo(this IUserApi operations, LMSApplicationCoreCommandsProfileBasicInfoUpdateCommand basicInfoUpdateCommand)
            {
                return operations.SetCurrentUserBasicProfileInfoAsync(basicInfoUpdateCommand).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='basicInfoUpdateCommand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserViewModel> SetCurrentUserBasicProfileInfoAsync(this IUserApi operations, LMSApplicationCoreCommandsProfileBasicInfoUpdateCommand basicInfoUpdateCommand, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCurrentUserBasicProfileInfoWithHttpMessagesAsync(basicInfoUpdateCommand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LMSApplicationCoreViewModelUserViewModel GetCurrentUserInfo(this IUserApi operations)
            {
                return operations.GetCurrentUserInfoAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserViewModel> GetCurrentUserInfoAsync(this IUserApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='language'>
            /// </param>
            public static object SetUserLanguage(this IUserApi operations, string language)
            {
                return operations.SetUserLanguageAsync(language).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetUserLanguageAsync(this IUserApi operations, string language, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetUserLanguageWithHttpMessagesAsync(language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LMSApplicationCoreViewModelUserViewModel GetCurrentUserProfilePhoto(this IUserApi operations)
            {
                return operations.GetCurrentUserProfilePhotoAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserViewModel> GetCurrentUserProfilePhotoAsync(this IUserApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserProfilePhotoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profilePrictureUpdateCommand'>
            /// </param>
            public static LMSApplicationCoreViewModelUserViewModel SetUserProfilePhoto(this IUserApi operations, LMSApplicationCoreCommandsProfilePictureUpdateCommand profilePrictureUpdateCommand)
            {
                return operations.SetUserProfilePhotoAsync(profilePrictureUpdateCommand).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profilePrictureUpdateCommand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserViewModel> SetUserProfilePhotoAsync(this IUserApi operations, LMSApplicationCoreCommandsProfilePictureUpdateCommand profilePrictureUpdateCommand, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetUserProfilePhotoWithHttpMessagesAsync(profilePrictureUpdateCommand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static object GetUserEportfolioEntries(this IUserApi operations, string lang, int? userId = default(int?))
            {
                return operations.GetUserEportfolioEntriesAsync(lang, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserEportfolioEntriesAsync(this IUserApi operations, string lang, int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserEportfolioEntriesWithHttpMessagesAsync(lang, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eportfolioAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object AddEportfolioEntry(this IUserApi operations, LMSApplicationCoreCommandsEportfolioAddCommand eportfolioAddCommand, string lang)
            {
                return operations.AddEportfolioEntryAsync(eportfolioAddCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eportfolioAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddEportfolioEntryAsync(this IUserApi operations, LMSApplicationCoreCommandsEportfolioAddCommand eportfolioAddCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddEportfolioEntryWithHttpMessagesAsync(eportfolioAddCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eportfolioAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object EditEportfolioEntry(this IUserApi operations, LMSApplicationCoreCommandsEportfolioAddCommand eportfolioAddCommand, string lang)
            {
                return operations.EditEportfolioEntryAsync(eportfolioAddCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eportfolioAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditEportfolioEntryAsync(this IUserApi operations, LMSApplicationCoreCommandsEportfolioAddCommand eportfolioAddCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditEportfolioEntryWithHttpMessagesAsync(eportfolioAddCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eportfolioEntryId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteEportfolioEntry(this IUserApi operations, string eportfolioEntryId, string lang)
            {
                return operations.DeleteEportfolioEntryAsync(eportfolioEntryId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eportfolioEntryId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteEportfolioEntryAsync(this IUserApi operations, string eportfolioEntryId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEportfolioEntryWithHttpMessagesAsync(eportfolioEntryId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetCurrentUserSchoolId(this IUserApi operations, string lang)
            {
                return operations.GetCurrentUserSchoolIdAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetCurrentUserSchoolIdAsync(this IUserApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserSchoolIdWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsUserRoleInfo> GetUserSchoolsRoles(this IUserApi operations, string email, string lang)
            {
                return operations.GetUserSchoolsRolesAsync(email, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsUserRoleInfo>> GetUserSchoolsRolesAsync(this IUserApi operations, string email, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserSchoolsRolesWithHttpMessagesAsync(email, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
