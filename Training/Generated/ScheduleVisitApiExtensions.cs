// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ScheduleVisitApi.
    /// </summary>
    public static partial class ScheduleVisitApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='visitCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelScheduleVisitViewModel AddVisit(this IScheduleVisitApi operations, LMSApplicationCoreCommandsScheduleVisitCommand visitCommand, string lang)
            {
                return operations.AddVisitAsync(visitCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='visitCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelScheduleVisitViewModel> AddVisitAsync(this IScheduleVisitApi operations, LMSApplicationCoreCommandsScheduleVisitCommand visitCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddVisitWithHttpMessagesAsync(visitCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='visitId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteVisit(this IScheduleVisitApi operations, string visitId, string lang)
            {
                return operations.DeleteVisitAsync(visitId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='visitId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteVisitAsync(this IScheduleVisitApi operations, string visitId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVisitWithHttpMessagesAsync(visitId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='visitPeriod'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelScheduleVisitViewModel> GetUserScheduledVisits(this IScheduleVisitApi operations, string lang, int? visitPeriod = default(int?))
            {
                return operations.GetUserScheduledVisitsAsync(lang, visitPeriod).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='visitPeriod'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelScheduleVisitViewModel>> GetUserScheduledVisitsAsync(this IScheduleVisitApi operations, string lang, int? visitPeriod = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserScheduledVisitsWithHttpMessagesAsync(lang, visitPeriod, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
