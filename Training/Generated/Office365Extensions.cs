// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Office365.
    /// </summary>
    public static partial class Office365Extensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365GroupsListModelView GetGroups(this IOffice365 operations, string lang)
            {
                return operations.GetGroupsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365GroupsListModelView> GetGroupsAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetGroupsUserAdminOn(this IOffice365 operations, string lang)
            {
                return operations.GetGroupsUserAdminOnAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGroupsUserAdminOnAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsUserAdminOnWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSInfrastructureOffice365ContractsTeacher> GetSchoolTeachersMinimal(this IOffice365 operations, string lang)
            {
                return operations.GetSchoolTeachersMinimalAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSInfrastructureOffice365ContractsTeacher>> GetSchoolTeachersMinimalAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolTeachersMinimalWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSInfrastructureOffice365ContractsTeacher> GetSchoolTeachersMinimalForACourse(this IOffice365 operations, int courseId, string lang)
            {
                return operations.GetSchoolTeachersMinimalForACourseAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSInfrastructureOffice365ContractsTeacher>> GetSchoolTeachersMinimalForACourseAsync(this IOffice365 operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolTeachersMinimalForACourseWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='coursesIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelRoundRoundTeacherViewModel> GetSchoolTeachersMinimalForCourses(this IOffice365 operations, IList<int?> coursesIds, string lang)
            {
                return operations.GetSchoolTeachersMinimalForCoursesAsync(coursesIds, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='coursesIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelRoundRoundTeacherViewModel>> GetSchoolTeachersMinimalForCoursesAsync(this IOffice365 operations, IList<int?> coursesIds, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolTeachersMinimalForCoursesWithHttpMessagesAsync(coursesIds, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createGroupCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object CreateGroup(this IOffice365 operations, LMSApplicationCoreCommandsOffice365CreateOffice365GroupCommand createGroupCommand, string lang)
            {
                return operations.CreateGroupAsync(createGroupCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createGroupCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateGroupAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365CreateOffice365GroupCommand createGroupCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(createGroupCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reCreateOffice365GroupCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object RecreateGroup(this IOffice365 operations, LMSApplicationCoreCommandsOffice365ReCreateOffice365GroupCommand reCreateOffice365GroupCommand, string lang)
            {
                return operations.RecreateGroupAsync(reCreateOffice365GroupCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reCreateOffice365GroupCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RecreateGroupAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365ReCreateOffice365GroupCommand reCreateOffice365GroupCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecreateGroupWithHttpMessagesAsync(reCreateOffice365GroupCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetGroupFiles(this IOffice365 operations, string groupId, string lang)
            {
                return operations.GetGroupFilesAsync(groupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGroupFilesAsync(this IOffice365 operations, string groupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupFilesWithHttpMessagesAsync(groupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='folderId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetFolderFiles(this IOffice365 operations, string groupId, string folderId, string lang)
            {
                return operations.GetFolderFilesAsync(groupId, folderId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='folderId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFolderFilesAsync(this IOffice365 operations, string groupId, string folderId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFolderFilesWithHttpMessagesAsync(groupId, folderId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetOffice365CourseGroup(this IOffice365 operations, int courseId, string lang)
            {
                return operations.GetOffice365CourseGroupAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOffice365CourseGroupAsync(this IOffice365 operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOffice365CourseGroupWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365TenantSchoolInfoViewModel GetTenantSchoolInfoBySchoolId(this IOffice365 operations, string schoolId, string lang)
            {
                return operations.GetTenantSchoolInfoBySchoolIdAsync(schoolId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365TenantSchoolInfoViewModel> GetTenantSchoolInfoBySchoolIdAsync(this IOffice365 operations, string schoolId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantSchoolInfoBySchoolIdWithHttpMessagesAsync(schoolId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365TenantBasicViewModel GetTenantBasicInfo(this IOffice365 operations, string lang, string orgId = default(string))
            {
                return operations.GetTenantBasicInfoAsync(lang, orgId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365TenantBasicViewModel> GetTenantBasicInfoAsync(this IOffice365 operations, string lang, string orgId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantBasicInfoWithHttpMessagesAsync(lang, orgId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365AcademiccordinatorTenantSchoolInfoViewModel GetAcademiccoordinatorSchoolInfo(this IOffice365 operations, string lang)
            {
                return operations.GetAcademiccoordinatorSchoolInfoAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365AcademiccordinatorTenantSchoolInfoViewModel> GetAcademiccoordinatorSchoolInfoAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAcademiccoordinatorSchoolInfoWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365TenantUsersListViewModel GetTenantUsers(this IOffice365 operations, string lang, string orgId = default(string), int? pageNumber = default(int?), string userName = default(string))
            {
                return operations.GetTenantUsersAsync(lang, orgId, pageNumber, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365TenantUsersListViewModel> GetTenantUsersAsync(this IOffice365 operations, string lang, string orgId = default(string), int? pageNumber = default(int?), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantUsersWithHttpMessagesAsync(lang, orgId, pageNumber, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel> GetTenantLearners(this IOffice365 operations, string lang, string orgId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?))
            {
                return operations.GetTenantLearnersAsync(lang, orgId, pageSize, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel>> GetTenantLearnersAsync(this IOffice365 operations, string lang, string orgId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantLearnersWithHttpMessagesAsync(lang, orgId, pageSize, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel> GetTenantTeachers(this IOffice365 operations, string lang, string orgId = default(string))
            {
                return operations.GetTenantTeachersAsync(lang, orgId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel>> GetTenantTeachersAsync(this IOffice365 operations, string lang, string orgId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantTeachersWithHttpMessagesAsync(lang, orgId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel> GetTenantAcademicCoordinator(this IOffice365 operations, string lang, string orgId = default(string))
            {
                return operations.GetTenantAcademicCoordinatorAsync(lang, orgId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel>> GetTenantAcademicCoordinatorAsync(this IOffice365 operations, string lang, string orgId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantAcademicCoordinatorWithHttpMessagesAsync(lang, orgId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='getSubSchoolsUsers'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='aggregateSchools'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel> GetTenantSchoolUsersBySchoolId(this IOffice365 operations, string schoolId, string lang, int? pageNumber = default(int?), string userName = default(string), bool? getSubSchoolsUsers = default(bool?), string orgId = default(string), bool? aggregateSchools = default(bool?))
            {
                return operations.GetTenantSchoolUsersBySchoolIdAsync(schoolId, lang, pageNumber, userName, getSubSchoolsUsers, orgId, aggregateSchools).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='getSubSchoolsUsers'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='aggregateSchools'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel>> GetTenantSchoolUsersBySchoolIdAsync(this IOffice365 operations, string schoolId, string lang, int? pageNumber = default(int?), string userName = default(string), bool? getSubSchoolsUsers = default(bool?), string orgId = default(string), bool? aggregateSchools = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantSchoolUsersBySchoolIdWithHttpMessagesAsync(schoolId, lang, pageNumber, userName, getSubSchoolsUsers, orgId, aggregateSchools, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel> GetTenantSchoolLearnersBySchoolId(this IOffice365 operations, string schoolId, string lang)
            {
                return operations.GetTenantSchoolLearnersBySchoolIdAsync(schoolId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel>> GetTenantSchoolLearnersBySchoolIdAsync(this IOffice365 operations, string schoolId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantSchoolLearnersBySchoolIdWithHttpMessagesAsync(schoolId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel> GetTenantSchoolTeachersBySchoolId(this IOffice365 operations, string schoolId, string lang)
            {
                return operations.GetTenantSchoolTeachersBySchoolIdAsync(schoolId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel>> GetTenantSchoolTeachersBySchoolIdAsync(this IOffice365 operations, string schoolId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantSchoolTeachersBySchoolIdWithHttpMessagesAsync(schoolId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel> GetTenantSchoolAcademicCoordinatorBySchoolId(this IOffice365 operations, string schoolId, string lang)
            {
                return operations.GetTenantSchoolAcademicCoordinatorBySchoolIdAsync(schoolId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365TenantUsersViewModel>> GetTenantSchoolAcademicCoordinatorBySchoolIdAsync(this IOffice365 operations, string schoolId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantSchoolAcademicCoordinatorBySchoolIdWithHttpMessagesAsync(schoolId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365TenantSchoolsViewModel> GetAdminTenantSchools(this IOffice365 operations, string lang)
            {
                return operations.GetAdminTenantSchoolsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365TenantSchoolsViewModel>> GetAdminTenantSchoolsAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdminTenantSchoolsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365SchoolBasicInfoViewModel> GetAdminTenantSchoolsBasicInfo(this IOffice365 operations, string lang)
            {
                return operations.GetAdminTenantSchoolsBasicInfoAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365SchoolBasicInfoViewModel>> GetAdminTenantSchoolsBasicInfoAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdminTenantSchoolsBasicInfoWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='parentSchoolId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365SchoolBasicInfoViewModel> GetSubSchoolsBySchoolId(this IOffice365 operations, string lang, string parentSchoolId = default(string))
            {
                return operations.GetSubSchoolsBySchoolIdAsync(lang, parentSchoolId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='parentSchoolId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365SchoolBasicInfoViewModel>> GetSubSchoolsBySchoolIdAsync(this IOffice365 operations, string lang, string parentSchoolId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubSchoolsBySchoolIdWithHttpMessagesAsync(lang, parentSchoolId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365TenantSchoolsViewModel AddTenantSchool(this IOffice365 operations, LMSApplicationCoreCommandsOffice365Office365AddTenantSchoolCommand tenantSchoolCommand, string lang)
            {
                return operations.AddTenantSchoolAsync(tenantSchoolCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365TenantSchoolsViewModel> AddTenantSchoolAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365Office365AddTenantSchoolCommand tenantSchoolCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTenantSchoolWithHttpMessagesAsync(tenantSchoolCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateTenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365TenantSchoolsViewModel UpdateTenantSchool(this IOffice365 operations, LMSApplicationCoreCommandsOffice365UpdateTenantSchoolCommand updateTenantSchoolCommand, string lang)
            {
                return operations.UpdateTenantSchoolAsync(updateTenantSchoolCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateTenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365TenantSchoolsViewModel> UpdateTenantSchoolAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365UpdateTenantSchoolCommand updateTenantSchoolCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTenantSchoolWithHttpMessagesAsync(updateTenantSchoolCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365TenantInformationViewModel GetTenantInformation(this IOffice365 operations, string lang, string orgId = default(string), int? pageNumber = default(int?))
            {
                return operations.GetTenantInformationAsync(lang, orgId, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365TenantInformationViewModel> GetTenantInformationAsync(this IOffice365 operations, string lang, string orgId = default(string), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantInformationWithHttpMessagesAsync(lang, orgId, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='o365TenantInformationCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object UpdateTenantInformation(this IOffice365 operations, LMSApplicationCoreCommandsOffice365O365TenantInformationCommand o365TenantInformationCommand, string lang)
            {
                return operations.UpdateTenantInformationAsync(o365TenantInformationCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='o365TenantInformationCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTenantInformationAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365O365TenantInformationCommand o365TenantInformationCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTenantInformationWithHttpMessagesAsync(o365TenantInformationCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetTenantDisplayName(this IOffice365 operations, string lang)
            {
                return operations.GetTenantDisplayNameAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetTenantDisplayNameAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantDisplayNameWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365TenantSchoolBasicInfo GetTenantSchoolBasicInfoBySchoolId(this IOffice365 operations, string lang, string schoolId = default(string), string orgId = default(string), int? pageNumber = default(int?))
            {
                return operations.GetTenantSchoolBasicInfoBySchoolIdAsync(lang, schoolId, orgId, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365TenantSchoolBasicInfo> GetTenantSchoolBasicInfoBySchoolIdAsync(this IOffice365 operations, string lang, string schoolId = default(string), string orgId = default(string), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantSchoolBasicInfoBySchoolIdWithHttpMessagesAsync(lang, schoolId, orgId, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantProvisionedUsers'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365ProvisionedUsersErrorsViewModel> ProvisionSchoolUsers(this IOffice365 operations, LMSApplicationCoreCommandsOffice365TenantProvisionedUsersCommand tenantProvisionedUsers, string lang)
            {
                return operations.ProvisionSchoolUsersAsync(tenantProvisionedUsers, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantProvisionedUsers'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365ProvisionedUsersErrorsViewModel>> ProvisionSchoolUsersAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365TenantProvisionedUsersCommand tenantProvisionedUsers, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProvisionSchoolUsersWithHttpMessagesAsync(tenantProvisionedUsers, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantProvisionedAdminsCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelOffice365O365ProvisionedUsersErrorsViewModel> ProvisionOrgAdmins(this IOffice365 operations, LMSApplicationCoreCommandsOffice365TenantProvisionedAdminsCommand tenantProvisionedAdminsCommand, string lang)
            {
                return operations.ProvisionOrgAdminsAsync(tenantProvisionedAdminsCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantProvisionedAdminsCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelOffice365O365ProvisionedUsersErrorsViewModel>> ProvisionOrgAdminsAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365TenantProvisionedAdminsCommand tenantProvisionedAdminsCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProvisionOrgAdminsWithHttpMessagesAsync(tenantProvisionedAdminsCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addTenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365TenantSchoolsViewModel SchoolInitializationSetup(this IOffice365 operations, LMSApplicationCoreCommandsOffice365Office365AddTenantSchoolCommand addTenantSchoolCommand, string lang)
            {
                return operations.SchoolInitializationSetupAsync(addTenantSchoolCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addTenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365TenantSchoolsViewModel> SchoolInitializationSetupAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365Office365AddTenantSchoolCommand addTenantSchoolCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SchoolInitializationSetupWithHttpMessagesAsync(addTenantSchoolCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelOffice365O365UserBasicInfo GetUserColleagues(this IOffice365 operations, string lang)
            {
                return operations.GetUserColleaguesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelOffice365O365UserBasicInfo> GetUserColleaguesAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserColleaguesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAssignViewModel GetAllLearners(this IOffice365 operations, int id, string lang)
            {
                return operations.GetAllLearnersAsync(id, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssignViewModel> GetAllLearnersAsync(this IOffice365 operations, int id, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllLearnersWithHttpMessagesAsync(id, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='isPageInitiation'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='searchBySpaceOnly'>
            /// </param>
            /// <param name='spaceId'>
            /// </param>
            public static LMSApplicationCoreViewModelAssignViewModel GetLearnersForAssignCourseStudents(this IOffice365 operations, int courseId, int pageNumber, string lang, bool? isPageInitiation = default(bool?), string schoolId = default(string), int? gradeId = default(int?), string name = default(string), bool? searchBySpaceOnly = default(bool?), string spaceId = default(string))
            {
                return operations.GetLearnersForAssignCourseStudentsAsync(courseId, pageNumber, lang, isPageInitiation, schoolId, gradeId, name, searchBySpaceOnly, spaceId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='isPageInitiation'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='searchBySpaceOnly'>
            /// </param>
            /// <param name='spaceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssignViewModel> GetLearnersForAssignCourseStudentsAsync(this IOffice365 operations, int courseId, int pageNumber, string lang, bool? isPageInitiation = default(bool?), string schoolId = default(string), int? gradeId = default(int?), string name = default(string), bool? searchBySpaceOnly = default(bool?), string spaceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearnersForAssignCourseStudentsWithHttpMessagesAsync(courseId, pageNumber, lang, isPageInitiation, schoolId, gradeId, name, searchBySpaceOnly, spaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static LMSApplicationCoreViewModelAssignViewModel GetAssignCourseLearners(this IOffice365 operations, int courseId, int pageNumber, string lang, string schoolId = default(string), int? gradeId = default(int?), string name = default(string))
            {
                return operations.GetAssignCourseLearnersAsync(courseId, pageNumber, lang, schoolId, gradeId, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='gradeId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssignViewModel> GetAssignCourseLearnersAsync(this IOffice365 operations, int courseId, int pageNumber, string lang, string schoolId = default(string), int? gradeId = default(int?), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssignCourseLearnersWithHttpMessagesAsync(courseId, pageNumber, lang, schoolId, gradeId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetSelectedLearnersCount(this IOffice365 operations, LMSApplicationCoreSearchLearnerCommand command, string lang)
            {
                return operations.GetSelectedLearnersCountAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetSelectedLearnersCountAsync(this IOffice365 operations, LMSApplicationCoreSearchLearnerCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSelectedLearnersCountWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAssignViewModel GetAllLearnersAllowedForTrack(this IOffice365 operations, string id, string lang)
            {
                return operations.GetAllLearnersAllowedForTrackAsync(id, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssignViewModel> GetAllLearnersAllowedForTrackAsync(this IOffice365 operations, string id, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllLearnersAllowedForTrackWithHttpMessagesAsync(id, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? UploadO365TenantLicense(this IOffice365 operations, string organizationId, string lang)
            {
                return operations.UploadO365TenantLicenseAsync(organizationId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> UploadO365TenantLicenseAsync(this IOffice365 operations, string organizationId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadO365TenantLicenseWithHttpMessagesAsync(organizationId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetNewUniqueIdentifier(this IOffice365 operations, string lang)
            {
                return operations.GetNewUniqueIdentifierAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetNewUniqueIdentifierAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNewUniqueIdentifierWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteTenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? DeleteTenantSchool(this IOffice365 operations, LMSApplicationCoreCommandsDeleteTenantSchoolCommand deleteTenantSchoolCommand, string lang)
            {
                return operations.DeleteTenantSchoolAsync(deleteTenantSchoolCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteTenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteTenantSchoolAsync(this IOffice365 operations, LMSApplicationCoreCommandsDeleteTenantSchoolCommand deleteTenantSchoolCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTenantSchoolWithHttpMessagesAsync(deleteTenantSchoolCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='moveTenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? MoveTenantSchool(this IOffice365 operations, LMSApplicationCoreCommandsMoveTenantSchoolCommand moveTenantSchoolCommand, string lang)
            {
                return operations.MoveTenantSchoolAsync(moveTenantSchoolCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='moveTenantSchoolCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> MoveTenantSchoolAsync(this IOffice365 operations, LMSApplicationCoreCommandsMoveTenantSchoolCommand moveTenantSchoolCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MoveTenantSchoolWithHttpMessagesAsync(moveTenantSchoolCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void ActivateDeactivateUsers(this IOffice365 operations, LMSApplicationCoreCommandsOffice365ActivateDeactivateUserCommand userCommand, string lang)
            {
                operations.ActivateDeactivateUsersAsync(userCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateDeactivateUsersAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365ActivateDeactivateUserCommand userCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateDeactivateUsersWithHttpMessagesAsync(userCommand, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsAttendancesAttendanceStatus> GetDefaultAttendnaceStatus(this IOffice365 operations, string lang)
            {
                return operations.GetDefaultAttendnaceStatusAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsAttendancesAttendanceStatus>> GetDefaultAttendnaceStatusAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefaultAttendnaceStatusWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelRoleViewModel> GetOrganizationAvailableRoles(this IOffice365 operations, string lang)
            {
                return operations.GetOrganizationAvailableRolesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelRoleViewModel>> GetOrganizationAvailableRolesAsync(this IOffice365 operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganizationAvailableRolesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='usersCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object ChangeUsersRoles(this IOffice365 operations, LMSApplicationCoreCommandsOffice365ChangeUsersRoleCommand usersCommand, string lang)
            {
                return operations.ChangeUsersRolesAsync(usersCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='usersCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangeUsersRolesAsync(this IOffice365 operations, LMSApplicationCoreCommandsOffice365ChangeUsersRoleCommand usersCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeUsersRolesWithHttpMessagesAsync(usersCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='currentSchoolId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelGradeBookGradeCategoryViewModel> GetMoreGradeCategory(this IOffice365 operations, string lang, string currentSchoolId = default(string), int? pageNumber = default(int?))
            {
                return operations.GetMoreGradeCategoryAsync(lang, currentSchoolId, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='currentSchoolId'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelGradeBookGradeCategoryViewModel>> GetMoreGradeCategoryAsync(this IOffice365 operations, string lang, string currentSchoolId = default(string), int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMoreGradeCategoryWithHttpMessagesAsync(lang, currentSchoolId, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
