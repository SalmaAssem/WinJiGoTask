// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BehaviourApi.
    /// </summary>
    public static partial class BehaviourApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='studentCode'>
            /// </param>
            public static LMSApplicationCoreViewModelTotalBehaviour GetUserTotalBehaviour(this IBehaviourApi operations, string lang, string studentCode = default(string))
            {
                return operations.GetUserTotalBehaviourAsync(lang, studentCode).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='studentCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTotalBehaviour> GetUserTotalBehaviourAsync(this IBehaviourApi operations, string lang, string studentCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserTotalBehaviourWithHttpMessagesAsync(lang, studentCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentCode'>
            /// </param>
            /// <param name='isUp'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='note'>
            /// </param>
            public static LMSApplicationCoreViewModelTotalBehaviour AddUserBehaviour(this IBehaviourApi operations, string studentCode, string isUp, string lang, string note = default(string))
            {
                return operations.AddUserBehaviourAsync(studentCode, isUp, lang, note).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentCode'>
            /// </param>
            /// <param name='isUp'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='note'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTotalBehaviour> AddUserBehaviourAsync(this IBehaviourApi operations, string studentCode, string isUp, string lang, string note = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserBehaviourWithHttpMessagesAsync(studentCode, isUp, lang, note, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentCode'>
            /// </param>
            /// <param name='isUp'>
            /// </param>
            /// <param name='reasonId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='note'>
            /// </param>
            public static LMSApplicationCoreViewModelTotalBehaviour AddUserBehaviours(this IBehaviourApi operations, string studentCode, string isUp, string reasonId, string lang, string note = default(string))
            {
                return operations.AddUserBehavioursAsync(studentCode, isUp, reasonId, lang, note).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentCode'>
            /// </param>
            /// <param name='isUp'>
            /// </param>
            /// <param name='reasonId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='note'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTotalBehaviour> AddUserBehavioursAsync(this IBehaviourApi operations, string studentCode, string isUp, string reasonId, string lang, string note = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserBehavioursWithHttpMessagesAsync(studentCode, isUp, reasonId, lang, note, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='behaviourTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelBehaviourReasonDetails GetBehaviourReasons(this IBehaviourApi operations, string behaviourTypeId, string lang)
            {
                return operations.GetBehaviourReasonsAsync(behaviourTypeId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='behaviourTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelBehaviourReasonDetails> GetBehaviourReasonsAsync(this IBehaviourApi operations, string behaviourTypeId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBehaviourReasonsWithHttpMessagesAsync(behaviourTypeId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
