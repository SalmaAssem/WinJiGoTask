// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReportApi.
    /// </summary>
    public static partial class ReportApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            public static LMSApplicationCoreViewModelReportOverallReportViewModel GetOverallReport(this IReportApi operations, string lang, string orgId = default(string))
            {
                return operations.GetOverallReportAsync(lang, orgId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReportOverallReportViewModel> GetOverallReportAsync(this IReportApi operations, string lang, string orgId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportWithHttpMessagesAsync(lang, orgId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelReportCourseInfoReportViewModel> GetCoursesInfoReport(this IReportApi operations, string lang, string orgId = default(string))
            {
                return operations.GetCoursesInfoReportAsync(lang, orgId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelReportCourseInfoReportViewModel>> GetCoursesInfoReportAsync(this IReportApi operations, string lang, string orgId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoursesInfoReportWithHttpMessagesAsync(lang, orgId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelReportCourseReportViewModel GetCourseReport(this IReportApi operations, int courseId, string lang)
            {
                return operations.GetCourseReportAsync(courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReportCourseReportViewModel> GetCourseReportAsync(this IReportApi operations, int courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseReportWithHttpMessagesAsync(courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='dateDuration'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            public static LMSApplicationCoreViewModelReportCourseReportViewModel GetCourseGroupReport(this IReportApi operations, int courseGroupId, string lang, int? dateDuration = default(int?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?))
            {
                return operations.GetCourseGroupReportAsync(courseGroupId, lang, dateDuration, startDate, endDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='dateDuration'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReportCourseReportViewModel> GetCourseGroupReportAsync(this IReportApi operations, int courseGroupId, string lang, int? dateDuration = default(int?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupReportWithHttpMessagesAsync(courseGroupId, lang, dateDuration, startDate, endDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelReportCourseInfoReportViewModel> GetSchoolCoursesInfoReport(this IReportApi operations, string schoolId, string lang)
            {
                return operations.GetSchoolCoursesInfoReportAsync(schoolId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelReportCourseInfoReportViewModel>> GetSchoolCoursesInfoReportAsync(this IReportApi operations, string schoolId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolCoursesInfoReportWithHttpMessagesAsync(schoolId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelReportOverallReportViewModel GetTenentSchoolOverallReport(this IReportApi operations, string schoolId, string lang)
            {
                return operations.GetTenentSchoolOverallReportAsync(schoolId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReportOverallReportViewModel> GetTenentSchoolOverallReportAsync(this IReportApi operations, string schoolId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenentSchoolOverallReportWithHttpMessagesAsync(schoolId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='isStudentsOnly'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelReportUsageReportViewModel> UsageReport(this IReportApi operations, int courseId, bool isStudentsOnly, string lang)
            {
                return operations.UsageReportAsync(courseId, isStudentsOnly, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='isStudentsOnly'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelReportUsageReportViewModel>> UsageReportAsync(this IReportApi operations, int courseId, bool isStudentsOnly, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UsageReportWithHttpMessagesAsync(courseId, isStudentsOnly, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetNumberOfCreatedSessionsDetails(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?))
            {
                return operations.GetNumberOfCreatedSessionsDetailsAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetNumberOfCreatedSessionsDetailsAsync(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNumberOfCreatedSessionsDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetNumberOfActivatedSessionsDetails(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?))
            {
                return operations.GetNumberOfActivatedSessionsDetailsAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetNumberOfActivatedSessionsDetailsAsync(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNumberOfActivatedSessionsDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetNumberOfCreatedActivitiesDetails(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?))
            {
                return operations.GetNumberOfCreatedActivitiesDetailsAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetNumberOfCreatedActivitiesDetailsAsync(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNumberOfCreatedActivitiesDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetNumberOfCreatedDiscussionsDetails(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?))
            {
                return operations.GetNumberOfCreatedDiscussionsDetailsAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetNumberOfCreatedDiscussionsDetailsAsync(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNumberOfCreatedDiscussionsDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetNumberOfCreatedPostsDetails(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?))
            {
                return operations.GetNumberOfCreatedPostsDetailsAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetNumberOfCreatedPostsDetailsAsync(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNumberOfCreatedPostsDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetNumberOfAwardedBadgesDetails(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?))
            {
                return operations.GetNumberOfAwardedBadgesDetailsAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='getCourseGroupData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetNumberOfAwardedBadgesDetailsAsync(this IReportApi operations, int contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? getCourseGroupData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNumberOfAwardedBadgesDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, getCourseGroupData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReprtCreatedSessionsDetails(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReprtCreatedSessionsDetailsAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReprtCreatedSessionsDetailsAsync(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReprtCreatedSessionsDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReprtCreatedSessionsDetailsPost(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReprtCreatedSessionsDetailsPostAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReprtCreatedSessionsDetailsPostAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReprtCreatedSessionsDetailsPostWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportActivatedSessionsDetails(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportActivatedSessionsDetailsAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportActivatedSessionsDetailsAsync(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportActivatedSessionsDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportActivatedSessionsDetailsPost(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportActivatedSessionsDetailsPostAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportActivatedSessionsDetailsPostAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportActivatedSessionsDetailsPostWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallSessionsDetails(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallSessionsDetailsAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<LMSApplicationCoreViewModelChartPointViewModel>>> GetOverallSessionsDetailsAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallSessionsDetailsWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportCreatedActivitiesDetails(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportCreatedActivitiesDetailsAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportCreatedActivitiesDetailsAsync(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportCreatedActivitiesDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportCreatedActivitiesDetailsPost(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportCreatedActivitiesDetailsPostAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportCreatedActivitiesDetailsPostAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportCreatedActivitiesDetailsPostWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportCreatedDiscussionsDetails(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportCreatedDiscussionsDetailsAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportCreatedDiscussionsDetailsAsync(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportCreatedDiscussionsDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportCreatedDiscussionsDetailsPost(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportCreatedDiscussionsDetailsPostAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportCreatedDiscussionsDetailsPostAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportCreatedDiscussionsDetailsPostWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportCreatedPollsDetails(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportCreatedPollsDetailsAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportCreatedPollsDetailsAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportCreatedPollsDetailsWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportCreatedSurveysDetails(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportCreatedSurveysDetailsAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportCreatedSurveysDetailsAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportCreatedSurveysDetailsWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportCreatedPostsDetails(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportCreatedPostsDetailsAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportCreatedPostsDetailsAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportCreatedPostsDetailsWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportAwardedBadgesDetails(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?))
            {
                return operations.GetOverallReportAwardedBadgesDetailsAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportAwardedBadgesDetailsAsync(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportAwardedBadgesDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportAwardedBadgesDetailsPost(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetOverallReportAwardedBadgesDetailsPostAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportAwardedBadgesDetailsPostAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportAwardedBadgesDetailsPostWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterbyCoursePublishedDate'>
            /// </param>
            public static IList<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetCollaborationReportTimeLineDetails(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCollaborationReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterbyCoursePublishedDate = default(bool?))
            {
                return operations.GetCollaborationReportTimeLineDetailsAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterbyCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterbyCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<LMSApplicationCoreViewModelChartPointViewModel>>> GetCollaborationReportTimeLineDetailsAsync(this IReportApi operations, LMSApplicationCoreCommandsSystemReportsCollaborationReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterbyCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollaborationReportTimeLineDetailsWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterbyCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelChartPointViewModel> GetOverallReportCreatedPostssDetails(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?))
            {
                return operations.GetOverallReportCreatedPostssDetailsAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='chartDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='organizationId'>
            /// </param>
            /// <param name='applyOnSubSchools'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelChartPointViewModel>> GetOverallReportCreatedPostssDetailsAsync(this IReportApi operations, string contextId, int chartDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), string organizationId = default(string), bool? applyOnSubSchools = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOverallReportCreatedPostssDetailsWithHttpMessagesAsync(contextId, chartDuration, lang, startDate, endDate, organizationId, applyOnSubSchools, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
