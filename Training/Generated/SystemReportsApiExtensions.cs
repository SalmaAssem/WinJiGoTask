// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SystemReportsApi.
    /// </summary>
    public static partial class SystemReportsApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsReportStatisticsViewModel> GetCoursesStatisticsReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?))
            {
                return operations.GetCoursesStatisticsReportAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statisticsReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='filterByCoursePublishedDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsReportStatisticsViewModel>> GetCoursesStatisticsReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsCoursesStatisitcsReportCommand statisticsReportCommand, string lang, bool? getPublishedCoursesOnly = default(bool?), bool? filterByCoursePublishedDate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoursesStatisticsReportWithHttpMessagesAsync(statisticsReportCommand, lang, getPublishedCoursesOnly, filterByCoursePublishedDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsInsightsSummaryViewModel GetInsightsSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsInsightsSummaryCommand command, string lang, bool? getPublishedCoursesOnly = default(bool?))
            {
                return operations.GetInsightsSummaryAsync(command, lang, getPublishedCoursesOnly).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='getPublishedCoursesOnly'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsInsightsSummaryViewModel> GetInsightsSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsInsightsSummaryCommand command, string lang, bool? getPublishedCoursesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInsightsSummaryWithHttpMessagesAsync(command, lang, getPublishedCoursesOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsTopReportViewModel> GetCoursesTopReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTopReportCommand topReportCommand, string lang)
            {
                return operations.GetCoursesTopReportAsync(topReportCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsTopReportViewModel>> GetCoursesTopReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTopReportCommand topReportCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoursesTopReportWithHttpMessagesAsync(topReportCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelReportInitialCourseInfoReportViewModel LoadInitialCoursesInfoReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsCoursesReportCommand reportCommand, string lang)
            {
                return operations.LoadInitialCoursesInfoReportAsync(reportCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReportInitialCourseInfoReportViewModel> LoadInitialCoursesInfoReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsCoursesReportCommand reportCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoadInitialCoursesInfoReportWithHttpMessagesAsync(reportCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelReportCourseInfoReportViewModel> LoadPageCoursesInfoReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsCoursesReportCommand reportCommand, string lang)
            {
                return operations.LoadPageCoursesInfoReportAsync(reportCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelReportCourseInfoReportViewModel>> LoadPageCoursesInfoReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsCoursesReportCommand reportCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoadPageCoursesInfoReportWithHttpMessagesAsync(reportCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='dateDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsReportStatisticsViewModel> GetCourseGroupStatisticsReport(this ISystemReportsApi operations, int courseGroupId, int dateDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?))
            {
                return operations.GetCourseGroupStatisticsReportAsync(courseGroupId, dateDuration, lang, startDate, endDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='dateDuration'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsReportStatisticsViewModel>> GetCourseGroupStatisticsReportAsync(this ISystemReportsApi operations, int courseGroupId, int dateDuration, string lang, System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupStatisticsReportWithHttpMessagesAsync(courseGroupId, dateDuration, lang, startDate, endDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelReportCourseInfoReportViewModel GetCourseGeneralInfoReport(this ISystemReportsApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseGeneralInfoReportAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReportCourseInfoReportViewModel> GetCourseGeneralInfoReportAsync(this ISystemReportsApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGeneralInfoReportWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAttendanceStatusViewModel> GetCourseAttendanceReport(this ISystemReportsApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseAttendanceReportAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAttendanceStatusViewModel>> GetCourseAttendanceReportAsync(this ISystemReportsApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseAttendanceReportWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelReportCourseOverViewReportViewModel GetCourseOverViewReport(this ISystemReportsApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseOverViewReportAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReportCourseOverViewReportViewModel> GetCourseOverViewReportAsync(this ISystemReportsApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseOverViewReportWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTraineesProgressViewModel GetCourseGroupTraineesProgressReport(this ISystemReportsApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseGroupTraineesProgressReportAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTraineesProgressViewModel> GetCourseGroupTraineesProgressReportAsync(this ISystemReportsApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupTraineesProgressReportWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTraineesProgressViewModel GetCourseReportSummary(this ISystemReportsApi operations, int courseGroupId, string lang)
            {
                return operations.GetCourseReportSummaryAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTraineesProgressViewModel> GetCourseReportSummaryAsync(this ISystemReportsApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseReportSummaryWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTraineesAllActivitiesProgressViewModel GetTraineesAllActivitiesProgressByCourseGroupId(this ISystemReportsApi operations, int courseGroupId, string lang)
            {
                return operations.GetTraineesAllActivitiesProgressByCourseGroupIdAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTraineesAllActivitiesProgressViewModel> GetTraineesAllActivitiesProgressByCourseGroupIdAsync(this ISystemReportsApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineesAllActivitiesProgressByCourseGroupIdWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='learnerId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='duration'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTraineesAllActivitiesProgressViewModel GetTraineeAllActivitiesProgressByCourseGroupId(this ISystemReportsApi operations, int learnerId, string lang, int? courseGroupId = default(int?), int? duration = default(int?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?))
            {
                return operations.GetTraineeAllActivitiesProgressByCourseGroupIdAsync(learnerId, lang, courseGroupId, duration, startDate, endDate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='learnerId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='duration'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTraineesAllActivitiesProgressViewModel> GetTraineeAllActivitiesProgressByCourseGroupIdAsync(this ISystemReportsApi operations, int learnerId, string lang, int? courseGroupId = default(int?), int? duration = default(int?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineeAllActivitiesProgressByCourseGroupIdWithHttpMessagesAsync(learnerId, lang, courseGroupId, duration, startDate, endDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsTraineeGridViewModel> GetCourseGroupTraineesReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsCourseTraineesReportCommand command, string lang)
            {
                return operations.GetCourseGroupTraineesReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsTraineeGridViewModel>> GetCourseGroupTraineesReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsCourseTraineesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCourseGroupTraineesReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<int?> GetTraineeEnrolledCoursesIds(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeReportCommand command, string lang)
            {
                return operations.GetTraineeEnrolledCoursesIdsAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetTraineeEnrolledCoursesIdsAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineeEnrolledCoursesIdsWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<int?> GetTraineeAllCoursesCount(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeReportCommand command, string lang)
            {
                return operations.GetTraineeAllCoursesCountAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetTraineeAllCoursesCountAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineeAllCoursesCountWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTraineeProgressViewModel GetTraineeCoursesProgressReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeReportCommand command, string lang)
            {
                return operations.GetTraineeCoursesProgressReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTraineeProgressViewModel> GetTraineeCoursesProgressReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineeCoursesProgressReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='traineeStatisticsCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTraineeStatisticsViewModel GetTraineeStatisticsReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeStatisticsReportCommand traineeStatisticsCommand, string lang)
            {
                return operations.GetTraineeStatisticsReportAsync(traineeStatisticsCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='traineeStatisticsCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTraineeStatisticsViewModel> GetTraineeStatisticsReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeStatisticsReportCommand traineeStatisticsCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineeStatisticsReportWithHttpMessagesAsync(traineeStatisticsCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetTraineeCoursesReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeCoursesReportCommand command, string lang)
            {
                return operations.GetTraineeCoursesReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTraineeCoursesReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineeCoursesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineeCoursesReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<int?> GetTraineesIds(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineesReportCommand command, string lang)
            {
                return operations.GetTraineesIdsAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetTraineesIdsAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineesIdsWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsTraineesTopGrades> GetLearnersTopGrades(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineesStatisticsReportCommand command, string lang)
            {
                return operations.GetLearnersTopGradesAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsTraineesTopGrades>> GetLearnersTopGradesAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineesStatisticsReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearnersTopGradesWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTraineesStatisticsViewModel GetTraineesStatisticsReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineesStatisticsReportCommand command, string lang)
            {
                return operations.GetTraineesStatisticsReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTraineesStatisticsViewModel> GetTraineesStatisticsReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineesStatisticsReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineesStatisticsReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsTraineeOverAllViewModel> GetTraineesDetailsReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineesReportCommand command, string lang)
            {
                return operations.GetTraineesDetailsReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsTraineeOverAllViewModel>> GetTraineesDetailsReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTraineesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineesDetailsReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTraineesProgressViewModel GetTraineesProgressReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsOverAllReportCommand command, string lang)
            {
                return operations.GetTraineesProgressReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTraineesProgressViewModel> GetTraineesProgressReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsOverAllReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraineesProgressReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsSessionsReportSessionsReportSummaryViewModel GetSessionsReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang)
            {
                return operations.GetSessionsReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsSessionsReportSessionsReportSummaryViewModel> GetSessionsReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='learnerId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsUserViewModel GetLearnerSimpleInfo(this ISystemReportsApi operations, int learnerId, string lang, string schoolId = default(string), string orgId = default(string))
            {
                return operations.GetLearnerSimpleInfoAsync(learnerId, lang, schoolId, orgId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='learnerId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsUserViewModel> GetLearnerSimpleInfoAsync(this ISystemReportsApi operations, int learnerId, string lang, string schoolId = default(string), string orgId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearnerSimpleInfoWithHttpMessagesAsync(learnerId, lang, schoolId, orgId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsAttendanceProgressViewModel GetAttendanceStatusProgressReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsAttendanceReportCommand command, string lang)
            {
                return operations.GetAttendanceStatusProgressReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsAttendanceProgressViewModel> GetAttendanceStatusProgressReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsAttendanceReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttendanceStatusProgressReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelAttendanceStatusViewModel> GetAttendanceStatusProgressReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsAttendanceReportCommand command, string lang)
            {
                return operations.GetAttendanceStatusProgressReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelAttendanceStatusViewModel>> GetAttendanceStatusProgressReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsAttendanceReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttendanceStatusProgressReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsSubjectsReportSubjectsReportViewModel> GetSubjectsReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang)
            {
                return operations.GetSubjectsReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsSubjectsReportSubjectsReportViewModel>> GetSubjectsReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubjectsReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetSubjectsReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang)
            {
                return operations.GetSubjectsReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetSubjectsReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubjectsReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsBadgesPieViewModel GetBadgesReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsBadgesReportCommand command, string lang)
            {
                return operations.GetBadgesReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsBadgesPieViewModel> GetBadgesReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsBadgesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBadgesReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsBadgesPieViewModel GetBadgesPieChartReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsBadgesReportCommand command, string lang)
            {
                return operations.GetBadgesPieChartReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsBadgesPieViewModel> GetBadgesPieChartReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsBadgesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBadgesPieChartReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsCollaborationReportCollaborationReportViewModel GetCollaborationReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportReportCommand command, string lang)
            {
                return operations.GetCollaborationReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsCollaborationReportCollaborationReportViewModel> GetCollaborationReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollaborationReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsQuizzesReportViewModel GetQuizzesReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsQuizzesReportCommand command, string lang)
            {
                return operations.GetQuizzesReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsQuizzesReportViewModel> GetQuizzesReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsQuizzesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuizzesReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsAssessmentProgress> GetQuizzesAssessmentsProgressReportSummary(this ISystemReportsApi operations, int courseGroupId, string lang)
            {
                return operations.GetQuizzesAssessmentsProgressReportSummaryAsync(courseGroupId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courseGroupId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsAssessmentProgress>> GetQuizzesAssessmentsProgressReportSummaryAsync(this ISystemReportsApi operations, int courseGroupId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuizzesAssessmentsProgressReportSummaryWithHttpMessagesAsync(courseGroupId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetQuizzesCountReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsQuizzesReportCommand command, string lang)
            {
                return operations.GetQuizzesCountReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetQuizzesCountReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsQuizzesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuizzesCountReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsActivitiesReportViewModel GetActivitiesReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsActivitiesReportCommand command, string lang)
            {
                return operations.GetActivitiesReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsActivitiesReportViewModel> GetActivitiesReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsActivitiesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivitiesReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetActivitiesCountReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsActivitiesReportCommand command, string lang)
            {
                return operations.GetActivitiesCountReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetActivitiesCountReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsActivitiesReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivitiesCountReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsLearningObjectiveReportViewModel> GetLearningObjectivesReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang)
            {
                return operations.GetLearningObjectivesReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsLearningObjectiveReportViewModel>> GetLearningObjectivesReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearningObjectivesReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetLearningObjectivesReportSummary(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang)
            {
                return operations.GetLearningObjectivesReportSummaryAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetLearningObjectivesReportSummaryAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSessionsReportSessionReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearningObjectivesReportSummaryWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetOrganziationLearningObjectivesTotalCount(this ISystemReportsApi operations, string lang)
            {
                return operations.GetOrganziationLearningObjectivesTotalCountAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetOrganziationLearningObjectivesTotalCountAsync(this ISystemReportsApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganziationLearningObjectivesTotalCountWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTeachersViewModel GetTeachersListReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTeachersReportCommand command, string lang)
            {
                return operations.GetTeachersListReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTeachersViewModel> GetTeachersListReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsTeachersReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeachersListReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teacherId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsTeacherReportTeacherViewModel GetTeacherReport(this ISystemReportsApi operations, int teacherId, string lang)
            {
                return operations.GetTeacherReportAsync(teacherId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teacherId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsTeacherReportTeacherViewModel> GetTeacherReportAsync(this ISystemReportsApi operations, int teacherId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeacherReportWithHttpMessagesAsync(teacherId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelParentsViewModel GetParentsReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsParentReportCommand command, string lang)
            {
                return operations.GetParentsReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelParentsViewModel> GetParentsReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsParentReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParentsReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSystemReportsParentReportParentViewModel GetParentReport(this ISystemReportsApi operations, int parentId, string schoolId, string orgId, string lang)
            {
                return operations.GetParentReportAsync(parentId, schoolId, orgId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='orgId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSystemReportsParentReportParentViewModel> GetParentReportAsync(this ISystemReportsApi operations, int parentId, string schoolId, string orgId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParentReportWithHttpMessagesAsync(parentId, schoolId, orgId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSchoolViewModel GetSchoolsReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSchoolReportCommand command, string lang)
            {
                return operations.GetSchoolsReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSchoolViewModel> GetSchoolsReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSchoolReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolsReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSchoolViewModel GetSchoolsSummaryReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSchoolReportCommand command, string lang)
            {
                return operations.GetSchoolsSummaryReportAsync(command, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSchoolViewModel> GetSchoolsSummaryReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsSchoolReportCommand command, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolsSummaryReportWithHttpMessagesAsync(command, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='behaviourReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetBehaviuorStatusProgressReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsBehaviourReportCommand behaviourReportCommand, string lang)
            {
                return operations.GetBehaviuorStatusProgressReportAsync(behaviourReportCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='behaviourReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetBehaviuorStatusProgressReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsBehaviourReportCommand behaviourReportCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBehaviuorStatusProgressReportWithHttpMessagesAsync(behaviourReportCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='behaviourReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelSystemReportsBehaviourSummaryViewModel> GetBehaviourSummaryReport(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsBehaviourReportCommand behaviourReportCommand, string lang)
            {
                return operations.GetBehaviourSummaryReportAsync(behaviourReportCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='behaviourReportCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelSystemReportsBehaviourSummaryViewModel>> GetBehaviourSummaryReportAsync(this ISystemReportsApi operations, LMSApplicationCoreCommandsSystemReportsBehaviourReportCommand behaviourReportCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBehaviourSummaryReportWithHttpMessagesAsync(behaviourReportCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<IList<LMSApplicationCoreViewModelCustomReportsCustomReportViewModel>> GetCustomReportList(this ISystemReportsApi operations, string lang)
            {
                return operations.GetCustomReportListAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<LMSApplicationCoreViewModelCustomReportsCustomReportViewModel>>> GetCustomReportListAsync(this ISystemReportsApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomReportListWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
