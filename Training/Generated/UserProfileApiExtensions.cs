// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UserProfileApi.
    /// </summary>
    public static partial class UserProfileApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetCurrentUserId(this IUserProfileApi operations, string lang)
            {
                return operations.GetCurrentUserIdAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetCurrentUserIdAsync(this IUserProfileApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserIdWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetCurrentUserDisplayName(this IUserProfileApi operations, string lang)
            {
                return operations.GetCurrentUserDisplayNameAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetCurrentUserDisplayNameAsync(this IUserProfileApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserDisplayNameWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetCurrentUserProfileDetails(this IUserProfileApi operations, string lang)
            {
                return operations.GetCurrentUserProfileDetailsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetCurrentUserProfileDetailsAsync(this IUserProfileApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserProfileDetailsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetCurrentUserEditProfileDetails(this IUserProfileApi operations, string lang)
            {
                return operations.GetCurrentUserEditProfileDetailsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetCurrentUserEditProfileDetailsAsync(this IUserProfileApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserEditProfileDetailsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string GetUserProfileDetails(this IUserProfileApi operations, int userId, string lang)
            {
                return operations.GetUserProfileDetailsAsync(userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetUserProfileDetailsAsync(this IUserProfileApi operations, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserProfileDetailsWithHttpMessagesAsync(userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsTitle> GetTeacherTitles(this IUserProfileApi operations, string lang)
            {
                return operations.GetTeacherTitlesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsTitle>> GetTeacherTitlesAsync(this IUserProfileApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeacherTitlesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userProfileUpdateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string UpdateUserProfile(this IUserProfileApi operations, LMSApplicationCoreCommandsUserProfileUpdateCommand userProfileUpdateCommand, string lang)
            {
                return operations.UpdateUserProfileAsync(userProfileUpdateCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userProfileUpdateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateUserProfileAsync(this IUserProfileApi operations, LMSApplicationCoreCommandsUserProfileUpdateCommand userProfileUpdateCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserProfileWithHttpMessagesAsync(userProfileUpdateCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userPrivacyUpdateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsUserPrivacy UpdateUserPrivacy(this IUserProfileApi operations, LMSApplicationCoreCommandsUserPrivacyUpdateCommand userPrivacyUpdateCommand, string lang)
            {
                return operations.UpdateUserPrivacyAsync(userPrivacyUpdateCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userPrivacyUpdateCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsUserPrivacy> UpdateUserPrivacyAsync(this IUserProfileApi operations, LMSApplicationCoreCommandsUserPrivacyUpdateCommand userPrivacyUpdateCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserPrivacyWithHttpMessagesAsync(userPrivacyUpdateCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object ChangeMail(this IUserProfileApi operations, LMSApplicationCoreCommandsChangeEmailCommand model, string lang)
            {
                return operations.ChangeMailAsync(model, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangeMailAsync(this IUserProfileApi operations, LMSApplicationCoreCommandsChangeEmailCommand model, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeMailWithHttpMessagesAsync(model, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetUserGradedActivityData(this IUserProfileApi operations, int userId, string lang)
            {
                return operations.GetUserGradedActivityDataAsync(userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserGradedActivityDataAsync(this IUserProfileApi operations, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserGradedActivityDataWithHttpMessagesAsync(userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetUserCreatedActivityData(this IUserProfileApi operations, int userId, string lang)
            {
                return operations.GetUserCreatedActivityDataAsync(userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserCreatedActivityDataAsync(this IUserProfileApi operations, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserCreatedActivityDataWithHttpMessagesAsync(userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetUserPublishedActivityData(this IUserProfileApi operations, int userId, string lang)
            {
                return operations.GetUserPublishedActivityDataAsync(userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserPublishedActivityDataAsync(this IUserProfileApi operations, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPublishedActivityDataWithHttpMessagesAsync(userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolName'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<string> GetSchoolList(this IUserProfileApi operations, string schoolName, string lang)
            {
                return operations.GetSchoolListAsync(schoolName, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolName'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetSchoolListAsync(this IUserProfileApi operations, string schoolName, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchoolListWithHttpMessagesAsync(schoolName, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolName'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<string> PostSchoolList(this IUserProfileApi operations, string schoolName, string lang)
            {
                return operations.PostSchoolListAsync(schoolName, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolName'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> PostSchoolListAsync(this IUserProfileApi operations, string schoolName, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSchoolListWithHttpMessagesAsync(schoolName, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profilePictureUrl'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string UpdateUserProfilePhoto(this IUserProfileApi operations, LMSApplicationCoreCommandsAddEditUserProfilePictureCommand profilePictureUrl, string lang)
            {
                return operations.UpdateUserProfilePhotoAsync(profilePictureUrl, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profilePictureUrl'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateUserProfilePhotoAsync(this IUserProfileApi operations, LMSApplicationCoreCommandsAddEditUserProfilePictureCommand profilePictureUrl, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserProfilePhotoWithHttpMessagesAsync(profilePictureUrl, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='usersIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelUserInformation> GetUsersBasicData(this IUserProfileApi operations, IList<int?> usersIds, string lang)
            {
                return operations.GetUsersBasicDataAsync(usersIds, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='usersIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelUserInformation>> GetUsersBasicDataAsync(this IUserProfileApi operations, IList<int?> usersIds, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersBasicDataWithHttpMessagesAsync(usersIds, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static LMSApplicationCoreViewModelUserProfileUserAchievementsViewModel GetUserAchievments(this IUserProfileApi operations, int userId, string lang, int? pageNumber = default(int?))
            {
                return operations.GetUserAchievmentsAsync(userId, lang, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserProfileUserAchievementsViewModel> GetUserAchievmentsAsync(this IUserProfileApi operations, int userId, string lang, int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserAchievmentsWithHttpMessagesAsync(userId, lang, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static LMSApplicationCoreViewModelUserProfileUserAchievementsViewModel GetUserCertificates(this IUserProfileApi operations, int userId, string lang, int? pageNumber = default(int?))
            {
                return operations.GetUserCertificatesAsync(userId, lang, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserProfileUserAchievementsViewModel> GetUserCertificatesAsync(this IUserProfileApi operations, int userId, string lang, int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserCertificatesWithHttpMessagesAsync(userId, lang, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            public static LMSApplicationCoreViewModelUserProfileUserAchievementsViewModel GetUserBadges(this IUserProfileApi operations, int userId, string lang, int? pageNumber = default(int?))
            {
                return operations.GetUserBadgesAsync(userId, lang, pageNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelUserProfileUserAchievementsViewModel> GetUserBadgesAsync(this IUserProfileApi operations, int userId, string lang, int? pageNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserBadgesWithHttpMessagesAsync(userId, lang, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
