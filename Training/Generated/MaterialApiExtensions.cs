// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MaterialApi.
    /// </summary>
    public static partial class MaterialApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialDetailsViewModel AddNewMaterial(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialAddCommand materialAddCommand, string lang)
            {
                return operations.AddNewMaterialAsync(materialAddCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialDetailsViewModel> AddNewMaterialAsync(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialAddCommand materialAddCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddNewMaterialWithHttpMessagesAsync(materialAddCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialDetailsViewModel AddFinalAssessment(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialAddCommand materialAddCommand, string lang)
            {
                return operations.AddFinalAssessmentAsync(materialAddCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialAddCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialDetailsViewModel> AddFinalAssessmentAsync(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialAddCommand materialAddCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddFinalAssessmentWithHttpMessagesAsync(materialAddCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialContextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialTypeViewModel GetMaterialTypes(this IMaterialApi operations, int materialContextTypeId, string lang)
            {
                return operations.GetMaterialTypesAsync(materialContextTypeId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialContextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialTypeViewModel> GetMaterialTypesAsync(this IMaterialApi operations, int materialContextTypeId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMaterialTypesWithHttpMessagesAsync(materialContextTypeId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='material'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string DeleteMaterial(this IMaterialApi operations, LMSApplicationCoreCommandsDeleteMaterialCommand material, string lang)
            {
                return operations.DeleteMaterialAsync(material, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='material'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteMaterialAsync(this IMaterialApi operations, LMSApplicationCoreCommandsDeleteMaterialCommand material, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteMaterialWithHttpMessagesAsync(material, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialDetailsViewModel UpdateMaterial(this IMaterialApi operations, LMSApplicationCoreCommandsUpdateMaterialCommand materialJson, string lang)
            {
                return operations.UpdateMaterialAsync(materialJson, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialDetailsViewModel> UpdateMaterialAsync(this IMaterialApi operations, LMSApplicationCoreCommandsUpdateMaterialCommand materialJson, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMaterialWithHttpMessagesAsync(materialJson, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialDetailsViewModel UpdateFinalAssessment(this IMaterialApi operations, LMSApplicationCoreCommandsUpdateMaterialCommand materialJson, string lang)
            {
                return operations.UpdateFinalAssessmentAsync(materialJson, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialJson'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialDetailsViewModel> UpdateFinalAssessmentAsync(this IMaterialApi operations, LMSApplicationCoreCommandsUpdateMaterialCommand materialJson, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFinalAssessmentWithHttpMessagesAsync(materialJson, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='videoId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetVideoDetails(this IMaterialApi operations, string videoId, string lang)
            {
                return operations.GetVideoDetailsAsync(videoId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='videoId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVideoDetailsAsync(this IMaterialApi operations, string videoId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVideoDetailsWithHttpMessagesAsync(videoId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchValue'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            public static object GetYoutubeSearchResults(this IMaterialApi operations, string searchValue, string lang, string channelId = default(string))
            {
                return operations.GetYoutubeSearchResultsAsync(searchValue, lang, channelId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchValue'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetYoutubeSearchResultsAsync(this IMaterialApi operations, string searchValue, string lang, string channelId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetYoutubeSearchResultsWithHttpMessagesAsync(searchValue, lang, channelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialContextId'>
            /// </param>
            /// <param name='parentContextId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelMaterialDetailsViewModel> GetContextMaterials(this IMaterialApi operations, string materialContextId, string parentContextId, string lang)
            {
                return operations.GetContextMaterialsAsync(materialContextId, parentContextId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialContextId'>
            /// </param>
            /// <param name='parentContextId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelMaterialDetailsViewModel>> GetContextMaterialsAsync(this IMaterialApi operations, string materialContextId, string parentContextId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContextMaterialsWithHttpMessagesAsync(materialContextId, parentContextId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialOrderCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSApplicationCoreViewModelMaterialDetailsViewModel> SetMaterialsOrder(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialOrderCommand materialOrderCommand, string lang)
            {
                return operations.SetMaterialsOrderAsync(materialOrderCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialOrderCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSApplicationCoreViewModelMaterialDetailsViewModel>> SetMaterialsOrderAsync(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialOrderCommand materialOrderCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetMaterialsOrderWithHttpMessagesAsync(materialOrderCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialDetailsViewModel GetMaterial(this IMaterialApi operations, string materialId, string courseId, string lang)
            {
                return operations.GetMaterialAsync(materialId, courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialDetailsViewModel> GetMaterialAsync(this IMaterialApi operations, string materialId, string courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMaterialWithHttpMessagesAsync(materialId, courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialDetailsViewModel GetMaterialById(this IMaterialApi operations, string materialId, string lang)
            {
                return operations.GetMaterialByIdAsync(materialId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialDetailsViewModel> GetMaterialByIdAsync(this IMaterialApi operations, string materialId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMaterialByIdWithHttpMessagesAsync(materialId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAssessmentActivityDataViewModel GetActivityData(this IMaterialApi operations, string materialId, string courseId, string lang)
            {
                return operations.GetActivityDataAsync(materialId, courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssessmentActivityDataViewModel> GetActivityDataAsync(this IMaterialApi operations, string materialId, string courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivityDataWithHttpMessagesAsync(materialId, courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelAssessmentActivityDataViewModel GetFinalAssessmentData(this IMaterialApi operations, string materialId, string courseId, string lang)
            {
                return operations.GetFinalAssessmentDataAsync(materialId, courseId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='courseId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelAssessmentActivityDataViewModel> GetFinalAssessmentDataAsync(this IMaterialApi operations, string materialId, string courseId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFinalAssessmentDataWithHttpMessagesAsync(materialId, courseId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSDomainCoreModelsMaterialsMaterial UpdateActivityDetails(this IMaterialApi operations, LMSApplicationCoreCommandsUpdateActivityCommand activityCommand, string lang)
            {
                return operations.UpdateActivityDetailsAsync(activityCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSDomainCoreModelsMaterialsMaterial> UpdateActivityDetailsAsync(this IMaterialApi operations, LMSApplicationCoreCommandsUpdateActivityCommand activityCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateActivityDetailsWithHttpMessagesAsync(activityCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copyFileCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string CopyFile(this IMaterialApi operations, LMSApplicationCoreCommandsCopyFileCommand copyFileCommand, string lang)
            {
                return operations.CopyFileAsync(copyFileCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='copyFileCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CopyFileAsync(this IMaterialApi operations, LMSApplicationCoreCommandsCopyFileCommand copyFileCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopyFileWithHttpMessagesAsync(copyFileCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelMaterialDetailsViewModel GetContextFinalAssessment(this IMaterialApi operations, string contextId, string lang)
            {
                return operations.GetContextFinalAssessmentAsync(contextId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelMaterialDetailsViewModel> GetContextFinalAssessmentAsync(this IMaterialApi operations, string contextId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContextFinalAssessmentWithHttpMessagesAsync(contextId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextLastViewedMaterialCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object RecordLastViewedMaterial(this IMaterialApi operations, LMSApplicationCoreCommandsContextLastViewedMaterialCommand contextLastViewedMaterialCommand, string lang)
            {
                return operations.RecordLastViewedMaterialAsync(contextLastViewedMaterialCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextLastViewedMaterialCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RecordLastViewedMaterialAsync(this IMaterialApi operations, LMSApplicationCoreCommandsContextLastViewedMaterialCommand contextLastViewedMaterialCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecordLastViewedMaterialWithHttpMessagesAsync(contextLastViewedMaterialCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityScoresCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetAssessmentScores(this IMaterialApi operations, LMSApplicationCoreCommandsAssessmentActivityScoresCommand activityScoresCommand, string lang)
            {
                return operations.GetAssessmentScoresAsync(activityScoresCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityScoresCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAssessmentScoresAsync(this IMaterialApi operations, LMSApplicationCoreCommandsAssessmentActivityScoresCommand activityScoresCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssessmentScoresWithHttpMessagesAsync(activityScoresCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resumeVideoCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object SetCurrentTimeForVideoMaterial(this IMaterialApi operations, LMSApplicationCoreCommandsResumeVideoCommand resumeVideoCommand, string lang)
            {
                return operations.SetCurrentTimeForVideoMaterialAsync(resumeVideoCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resumeVideoCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetCurrentTimeForVideoMaterialAsync(this IMaterialApi operations, LMSApplicationCoreCommandsResumeVideoCommand resumeVideoCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCurrentTimeForVideoMaterialWithHttpMessagesAsync(resumeVideoCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resumeVideoCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object FlagVideoMaterialAsCompleted(this IMaterialApi operations, LMSApplicationCoreCommandsResumeVideoCommand resumeVideoCommand, string lang)
            {
                return operations.FlagVideoMaterialAsCompletedAsync(resumeVideoCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resumeVideoCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FlagVideoMaterialAsCompletedAsync(this IMaterialApi operations, LMSApplicationCoreCommandsResumeVideoCommand resumeVideoCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FlagVideoMaterialAsCompletedWithHttpMessagesAsync(resumeVideoCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? GetVideoIsCompleted(this IMaterialApi operations, string materialId, string lang)
            {
                return operations.GetVideoIsCompletedAsync(materialId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> GetVideoIsCompletedAsync(this IMaterialApi operations, string materialId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVideoIsCompletedWithHttpMessagesAsync(materialId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetCurrentTimeForVideoMaterial(this IMaterialApi operations, string materialId, string contextId, string lang)
            {
                return operations.GetCurrentTimeForVideoMaterialAsync(materialId, contextId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCurrentTimeForVideoMaterialAsync(this IMaterialApi operations, string materialId, string contextId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentTimeForVideoMaterialWithHttpMessagesAsync(materialId, contextId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetAssessment(this IMaterialApi operations, int contextId, string materialId, string lang)
            {
                return operations.GetAssessmentAsync(contextId, materialId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='materialId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAssessmentAsync(this IMaterialApi operations, int contextId, string materialId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssessmentWithHttpMessagesAsync(contextId, materialId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetFinalAssessment(this IMaterialApi operations, int contextId, string lang)
            {
                return operations.GetFinalAssessmentAsync(contextId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFinalAssessmentAsync(this IMaterialApi operations, int contextId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFinalAssessmentWithHttpMessagesAsync(contextId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityEditCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetActivityMaterial(this IMaterialApi operations, LMSApplicationCoreCommandsAssessmentActivityEditCommand activityEditCommand, string lang)
            {
                return operations.GetActivityMaterialAsync(activityEditCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityEditCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetActivityMaterialAsync(this IMaterialApi operations, LMSApplicationCoreCommandsAssessmentActivityEditCommand activityEditCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivityMaterialWithHttpMessagesAsync(activityEditCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publishCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object SchedulePublishQuiz(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialPublishCommand publishCommand, string lang)
            {
                return operations.SchedulePublishQuizAsync(publishCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publishCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SchedulePublishQuizAsync(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialPublishCommand publishCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SchedulePublishQuizWithHttpMessagesAsync(publishCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publishCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object RemoveSchedulePublishQuiz(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialPublishCommand publishCommand, string lang)
            {
                return operations.RemoveSchedulePublishQuizAsync(publishCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publishCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveSchedulePublishQuizAsync(this IMaterialApi operations, LMSApplicationCoreCommandsMaterialPublishCommand publishCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveSchedulePublishQuizWithHttpMessagesAsync(publishCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
