// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InvitationApi.
    /// </summary>
    public static partial class InvitationApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetPendingInvitationsCount(this IInvitationApi operations, int contextTypeId, string lang)
            {
                return operations.GetPendingInvitationsCountAsync(contextTypeId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetPendingInvitationsCountAsync(this IInvitationApi operations, int contextTypeId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPendingInvitationsCountWithHttpMessagesAsync(contextTypeId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetAllPendingInvitationsCount(this IInvitationApi operations, string lang)
            {
                return operations.GetAllPendingInvitationsCountAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetAllPendingInvitationsCountAsync(this IInvitationApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPendingInvitationsCountWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelCourseInvitationsListViewModel GetPendingInvitations(this IInvitationApi operations, int contextTypeId, string lang)
            {
                return operations.GetPendingInvitationsAsync(contextTypeId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelCourseInvitationsListViewModel> GetPendingInvitationsAsync(this IInvitationApi operations, int contextTypeId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPendingInvitationsWithHttpMessagesAsync(contextTypeId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelInvitationsViewModel GetAllPendingInvitations(this IInvitationApi operations, string lang)
            {
                return operations.GetAllPendingInvitationsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelInvitationsViewModel> GetAllPendingInvitationsAsync(this IInvitationApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPendingInvitationsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dismissInvitationCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string DismissInvitaion(this IInvitationApi operations, LMSApplicationCoreCommandsInvitationCommand dismissInvitationCommand, string lang)
            {
                return operations.DismissInvitaionAsync(dismissInvitationCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dismissInvitationCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DismissInvitaionAsync(this IInvitationApi operations, LMSApplicationCoreCommandsInvitationCommand dismissInvitationCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DismissInvitaionWithHttpMessagesAsync(dismissInvitationCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptInvitationCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static string AcceptInvitaion(this IInvitationApi operations, LMSApplicationCoreCommandsInvitationCommand acceptInvitationCommand, string lang)
            {
                return operations.AcceptInvitaionAsync(acceptInvitationCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptInvitationCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> AcceptInvitaionAsync(this IInvitationApi operations, LMSApplicationCoreCommandsInvitationCommand acceptInvitationCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AcceptInvitaionWithHttpMessagesAsync(acceptInvitationCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
