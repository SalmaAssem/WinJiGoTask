// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AlbumApi.
    /// </summary>
    public static partial class AlbumApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='albumId'>
            /// </param>
            /// <param name='albumType'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPhotoAlbumPhotoAlbumViewModel GetAlbumDetails(this IAlbumApi operations, string contextId, int contextTypeId, string albumId, int albumType, string lang)
            {
                return operations.GetAlbumDetailsAsync(contextId, contextTypeId, albumId, albumType, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contextId'>
            /// </param>
            /// <param name='contextTypeId'>
            /// </param>
            /// <param name='albumId'>
            /// </param>
            /// <param name='albumType'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPhotoAlbumPhotoAlbumViewModel> GetAlbumDetailsAsync(this IAlbumApi operations, string contextId, int contextTypeId, string albumId, int albumType, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAlbumDetailsWithHttpMessagesAsync(contextId, contextTypeId, albumId, albumType, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditAlbumCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPhotoAlbumPhotoAlbumViewModel AddSpaceAlbum(this IAlbumApi operations, LMSApplicationCoreCommandsSpaceAddEditAlbum addEditAlbumCommand, string lang)
            {
                return operations.AddSpaceAlbumAsync(addEditAlbumCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditAlbumCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPhotoAlbumPhotoAlbumViewModel> AddSpaceAlbumAsync(this IAlbumApi operations, LMSApplicationCoreCommandsSpaceAddEditAlbum addEditAlbumCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddSpaceAlbumWithHttpMessagesAsync(addEditAlbumCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditAlbumCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPhotoAlbumPhotoAlbumViewModel UpdateSpaceAlbum(this IAlbumApi operations, LMSApplicationCoreCommandsSpaceAddEditAlbum addEditAlbumCommand, string lang)
            {
                return operations.UpdateSpaceAlbumAsync(addEditAlbumCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='addEditAlbumCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPhotoAlbumPhotoAlbumViewModel> UpdateSpaceAlbumAsync(this IAlbumApi operations, LMSApplicationCoreCommandsSpaceAddEditAlbum addEditAlbumCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSpaceAlbumWithHttpMessagesAsync(addEditAlbumCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='album'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelSpaceDeleteContainerViewModel DeleteSpaceAlbum(this IAlbumApi operations, object album, string lang)
            {
                return operations.DeleteSpaceAlbumAsync(album, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='album'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelSpaceDeleteContainerViewModel> DeleteSpaceAlbumAsync(this IAlbumApi operations, object album, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSpaceAlbumWithHttpMessagesAsync(album, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='photo'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelPhotoAlbumDeletePhotoViewModel DeletePhoto(this IAlbumApi operations, object photo, string lang)
            {
                return operations.DeletePhotoAsync(photo, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='photo'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelPhotoAlbumDeletePhotoViewModel> DeletePhotoAsync(this IAlbumApi operations, object photo, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePhotoWithHttpMessagesAsync(photo, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object GetNewSpaceId(this IAlbumApi operations, string lang)
            {
                return operations.GetNewSpaceIdAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetNewSpaceIdAsync(this IAlbumApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNewSpaceIdWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
