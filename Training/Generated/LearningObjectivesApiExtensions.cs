// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LearningObjectivesApi.
    /// </summary>
    public static partial class LearningObjectivesApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelLearningObjectiveViewModel GetRoots(this ILearningObjectivesApi operations, string lang)
            {
                return operations.GetRootsAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelLearningObjectiveViewModel> GetRootsAsync(this ILearningObjectivesApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRootsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelLearningObjectiveViewModel GetByParentId(this ILearningObjectivesApi operations, int parentId, string lang)
            {
                return operations.GetByParentIdAsync(parentId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelLearningObjectiveViewModel> GetByParentIdAsync(this ILearningObjectivesApi operations, int parentId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByParentIdWithHttpMessagesAsync(parentId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='unmapLearningObjective'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static void Unmap(this ILearningObjectivesApi operations, LMSApplicationCoreCommandsUnmapLearningObjectiveCommand unmapLearningObjective, string lang)
            {
                operations.UnmapAsync(unmapLearningObjective, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='unmapLearningObjective'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnmapAsync(this ILearningObjectivesApi operations, LMSApplicationCoreCommandsUnmapLearningObjectiveCommand unmapLearningObjective, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnmapWithHttpMessagesAsync(unmapLearningObjective, lang, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchValue'>
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelLearningObjectiveViewModel GetLearningObjectivesSearchResult(this ILearningObjectivesApi operations, string searchValue, int parentId, string lang)
            {
                return operations.GetLearningObjectivesSearchResultAsync(searchValue, parentId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchValue'>
            /// </param>
            /// <param name='parentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelLearningObjectiveViewModel> GetLearningObjectivesSearchResultAsync(this ILearningObjectivesApi operations, string searchValue, int parentId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearningObjectivesSearchResultWithHttpMessagesAsync(searchValue, parentId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static bool? IsAnyRootsByContextId(this ILearningObjectivesApi operations, string lang)
            {
                return operations.IsAnyRootsByContextIdAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsAnyRootsByContextIdAsync(this ILearningObjectivesApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAnyRootsByContextIdWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='learningObjectivesExternalIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelLearningObjectiveViewModel GetLearningObjectivesByExternalIds(this ILearningObjectivesApi operations, IList<string> learningObjectivesExternalIds, string lang)
            {
                return operations.GetLearningObjectivesByExternalIdsAsync(learningObjectivesExternalIds, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='learningObjectivesExternalIds'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelLearningObjectiveViewModel> GetLearningObjectivesByExternalIdsAsync(this ILearningObjectivesApi operations, IList<string> learningObjectivesExternalIds, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLearningObjectivesByExternalIdsWithHttpMessagesAsync(learningObjectivesExternalIds, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
