// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReflectionApi.
    /// </summary>
    public static partial class ReflectionApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='reflectionCommandreflectionState'>
            /// </param>
            /// <param name='reflectionCommandreflectionContextTypeId'>
            /// </param>
            /// <param name='reflectionCommandreflectionContextId'>
            /// </param>
            public static LMSApplicationCoreViewModelReflectionReflectionViewModel GetUserReflection(this IReflectionApi operations, string lang, int? reflectionCommandreflectionState = default(int?), int? reflectionCommandreflectionContextTypeId = default(int?), string reflectionCommandreflectionContextId = default(string))
            {
                return operations.GetUserReflectionAsync(lang, reflectionCommandreflectionState, reflectionCommandreflectionContextTypeId, reflectionCommandreflectionContextId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='reflectionCommandreflectionState'>
            /// </param>
            /// <param name='reflectionCommandreflectionContextTypeId'>
            /// </param>
            /// <param name='reflectionCommandreflectionContextId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReflectionReflectionViewModel> GetUserReflectionAsync(this IReflectionApi operations, string lang, int? reflectionCommandreflectionState = default(int?), int? reflectionCommandreflectionContextTypeId = default(int?), string reflectionCommandreflectionContextId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserReflectionWithHttpMessagesAsync(lang, reflectionCommandreflectionState, reflectionCommandreflectionContextTypeId, reflectionCommandreflectionContextId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reflectionCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object SetUserReflection(this IReflectionApi operations, LMSApplicationCoreCommandsReflectionReflectionCommand reflectionCommand, string lang)
            {
                return operations.SetUserReflectionAsync(reflectionCommand, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reflectionCommand'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetUserReflectionAsync(this IReflectionApi operations, LMSApplicationCoreCommandsReflectionReflectionCommand reflectionCommand, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetUserReflectionWithHttpMessagesAsync(reflectionCommand, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='postId'>
            /// </param>
            /// <param name='reflectionType'>
            /// </param>
            /// <param name='usersCount'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelReflectionReflectionUsersViewModel GetPostReflectionUsers(this IReflectionApi operations, string postId, int reflectionType, int usersCount, string lang)
            {
                return operations.GetPostReflectionUsersAsync(postId, reflectionType, usersCount, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='postId'>
            /// </param>
            /// <param name='reflectionType'>
            /// </param>
            /// <param name='usersCount'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelReflectionReflectionUsersViewModel> GetPostReflectionUsersAsync(this IReflectionApi operations, string postId, int reflectionType, int usersCount, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPostReflectionUsersWithHttpMessagesAsync(postId, reflectionType, usersCount, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
