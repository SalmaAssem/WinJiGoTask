// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AnnouncementApi.
    /// </summary>
    public static partial class AnnouncementApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='numberOfAnnouncement'>
            /// </param>
            public static IList<LMSDomainCoreViewModelsAnnouncementViewModel> GetUserAnnouncements(this IAnnouncementApi operations, int pageNumber, int pageSize, string lang, int? numberOfAnnouncement = default(int?))
            {
                return operations.GetUserAnnouncementsAsync(pageNumber, pageSize, lang, numberOfAnnouncement).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='numberOfAnnouncement'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreViewModelsAnnouncementViewModel>> GetUserAnnouncementsAsync(this IAnnouncementApi operations, int pageNumber, int pageSize, string lang, int? numberOfAnnouncement = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserAnnouncementsWithHttpMessagesAsync(pageNumber, pageSize, lang, numberOfAnnouncement, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static int? GetUnseenUserAnnouncementsCount(this IAnnouncementApi operations, string lang)
            {
                return operations.GetUnseenUserAnnouncementsCountAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetUnseenUserAnnouncementsCountAsync(this IAnnouncementApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUnseenUserAnnouncementsCountWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='announcment'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object CreateAnnouncment(this IAnnouncementApi operations, LMSApplicationCoreCommandsCreateAnnouncmentCommand announcment, string lang)
            {
                return operations.CreateAnnouncmentAsync(announcment, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='announcment'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAnnouncmentAsync(this IAnnouncementApi operations, LMSApplicationCoreCommandsCreateAnnouncmentCommand announcment, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAnnouncmentWithHttpMessagesAsync(announcment, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='announcmentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object DeleteAnnouncment(this IAnnouncementApi operations, int announcmentId, string lang)
            {
                return operations.DeleteAnnouncmentAsync(announcmentId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='announcmentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAnnouncmentAsync(this IAnnouncementApi operations, int announcmentId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAnnouncmentWithHttpMessagesAsync(announcmentId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static object SetAllAnnouncementsToBeSeen(this IAnnouncementApi operations, string lang)
            {
                return operations.SetAllAnnouncementsToBeSeenAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAllAnnouncementsToBeSeenAsync(this IAnnouncementApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetAllAnnouncementsToBeSeenWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<SystemCollectionsGenericKeyValuePairSystemStringSystemInt32> GetRoles(this IAnnouncementApi operations, string lang)
            {
                return operations.GetRolesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SystemCollectionsGenericKeyValuePairSystemStringSystemInt32>> GetRolesAsync(this IAnnouncementApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRolesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<SystemCollectionsGenericKeyValuePairSystemStringSystemInt32> GetTeachingCategoryRoles(this IAnnouncementApi operations, string lang)
            {
                return operations.GetTeachingCategoryRolesAsync(lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SystemCollectionsGenericKeyValuePairSystemStringSystemInt32>> GetTeachingCategoryRolesAsync(this IAnnouncementApi operations, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeachingCategoryRolesWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
