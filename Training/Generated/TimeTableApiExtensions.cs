// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace XWinji
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TimeTableApi.
    /// </summary>
    public static partial class TimeTableApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsClass> GetClassesByUserId(this ITimeTableApi operations, int userId, string lang)
            {
                return operations.GetClassesByUserIdAsync(userId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsClass>> GetClassesByUserIdAsync(this ITimeTableApi operations, int userId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClassesByUserIdWithHttpMessagesAsync(userId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='adminId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static IList<LMSDomainCoreModelsClass> GetAdminClassesByUserId(this ITimeTableApi operations, int adminId, string lang)
            {
                return operations.GetAdminClassesByUserIdAsync(adminId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='adminId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LMSDomainCoreModelsClass>> GetAdminClassesByUserIdAsync(this ITimeTableApi operations, int adminId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdminClassesByUserIdWithHttpMessagesAsync(adminId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelTimeTableTimeTableViewModel GetTimeTableDetails(this ITimeTableApi operations, int classId, string lang)
            {
                return operations.GetTimeTableDetailsAsync(classId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTimeTableTimeTableViewModel> GetTimeTableDetailsAsync(this ITimeTableApi operations, int classId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimeTableDetailsWithHttpMessagesAsync(classId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static LMSApplicationCoreViewModelTimeTableTimeTableViewModel GetMyTimeTableForTeachers(this ITimeTableApi operations, string lang, int? userId = default(int?))
            {
                return operations.GetMyTimeTableForTeachersAsync(lang, userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTimeTableTimeTableViewModel> GetMyTimeTableForTeachersAsync(this ITimeTableApi operations, string lang, int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyTimeTableForTeachersWithHttpMessagesAsync(lang, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelTimeTableTimeTableViewModel GetStudentTimeTableDetails(this ITimeTableApi operations, int studentId, string lang)
            {
                return operations.GetStudentTimeTableDetailsAsync(studentId, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentId'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTimeTableTimeTableViewModel> GetStudentTimeTableDetailsAsync(this ITimeTableApi operations, int studentId, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStudentTimeTableDetailsWithHttpMessagesAsync(studentId, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentCode'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static LMSApplicationCoreViewModelTimeTableTimeTableMobileViewModel GetStudentTimeTableForMobile(this ITimeTableApi operations, string studentCode, string lang)
            {
                return operations.GetStudentTimeTableForMobileAsync(studentCode, lang).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentCode'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LMSApplicationCoreViewModelTimeTableTimeTableMobileViewModel> GetStudentTimeTableForMobileAsync(this ITimeTableApi operations, string studentCode, string lang, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStudentTimeTableForMobileWithHttpMessagesAsync(studentCode, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
